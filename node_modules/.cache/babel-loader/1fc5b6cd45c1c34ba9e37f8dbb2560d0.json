{"ast":null,"code":"import { createContext, useContext } from 'react';\nimport { ChainId } from '../../constants';\nexport const NetworkContext = createContext({\n  network: {\n    provider: undefined,\n    chainId: ChainId.Mainnet,\n    accounts: [],\n    errors: []\n  },\n  update: () => undefined,\n  reportError: () => undefined,\n  activate: async () => undefined,\n  deactivate: () => undefined\n});\nexport function useNetwork() {\n  return useContext(NetworkContext);\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAKA,OAAO,MAAMC,cAAc,GAAGH,aAAa,CAMxC;AACDI,SAAO,EAAE;AACPC,YAAQ,EAAEC,SADH;AAEPC,WAAO,EAAEL,OAAO,CAACM,OAFV;AAGPC,YAAQ,EAAE,EAHH;AAIPC,UAAM,EAAE;AAJD,GADR;AAODC,QAAM,EAAE,MAAML,SAPb;AAQDM,aAAW,EAAE,MAAMN,SARlB;AASDO,UAAQ,EAAE,YAAYP,SATrB;AAUDQ,YAAU,EAAE,MAAMR;AAVjB,CANwC,CAApC;AAmBP,OAAM,SAAUS,UAAV,GAAoB;AACxB,SAAOd,UAAU,CAACE,cAAD,CAAjB;AACD","names":["createContext","useContext","ChainId","NetworkContext","network","provider","undefined","chainId","Mainnet","accounts","errors","update","reportError","activate","deactivate","useNetwork"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/network/context.ts"],"sourcesContent":["import { createContext, useContext } from 'react'\nimport { ChainId } from '../../constants'\nimport { Network } from './model'\nimport { ExternalProvider, JsonRpcProvider } from '@ethersproject/providers'\nimport { EventEmitter } from 'events'\n\nexport const NetworkContext = createContext<{\n  update: (network: Partial<Network>) => void\n  reportError: (error: Error) => void\n  activate: (provider: JsonRpcProvider | (EventEmitter & ExternalProvider)) => Promise<void>\n  deactivate: () => void\n  network: Network\n}>({\n  network: {\n    provider: undefined,\n    chainId: ChainId.Mainnet,\n    accounts: [],\n    errors: [],\n  },\n  update: () => undefined,\n  reportError: () => undefined,\n  activate: async () => undefined,\n  deactivate: () => undefined,\n})\n\nexport function useNetwork() {\n  return useContext(NetworkContext)\n}\n"]},"metadata":{},"sourceType":"module"}