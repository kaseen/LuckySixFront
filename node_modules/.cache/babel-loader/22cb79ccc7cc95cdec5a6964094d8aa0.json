{"ast":null,"code":"export function notificationReducer(state, action) {\n  var _a;\n\n  const {\n    chainId\n  } = action;\n  const chainState = (_a = state[chainId]) !== null && _a !== void 0 ? _a : [];\n\n  switch (action.type) {\n    case 'ADD_NOTIFICATION':\n      return Object.assign(Object.assign({}, state), {\n        [chainId]: [action.notification, ...chainState]\n      });\n\n    case 'REMOVE_NOTIFICATION':\n      {\n        return Object.assign(Object.assign({}, state), {\n          [chainId]: chainState.filter(notification => notification.id !== action.notificationId)\n        });\n      }\n  }\n}","map":{"version":3,"mappings":"AAiBA,OAAM,SAAUA,mBAAV,CAA8BC,KAA9B,EAAoDC,MAApD,EAAkE;;;AACtE,QAAM;AAAEC;AAAF,MAAcD,MAApB;AACA,QAAME,UAAU,SAAGH,KAAK,CAACE,OAAD,CAAR,MAAiB,IAAjB,IAAiBE,aAAjB,GAAiBA,EAAjB,GAAqB,EAArC;;AAEA,UAAQH,MAAM,CAACI,IAAf;AACE,SAAK,kBAAL;AACE,6CACKL,KADL,GACU;AACR,SAACE,OAAD,GAAW,CAACD,MAAM,CAACK,YAAR,EAAsB,GAAGH,UAAzB;AADH,OADV;;AAIF,SAAK,qBAAL;AAA4B;AAC1B,+CACKH,KADL,GACU;AACR,WAACE,OAAD,GAAWC,UAAU,CAACI,MAAX,CAAmBD,YAAD,IAAkBA,YAAY,CAACE,EAAb,KAAoBP,MAAM,CAACQ,cAA/D;AADH,SADV;AAID;AAXH;AAaD","names":["notificationReducer","state","action","chainId","chainState","_a","type","notification","filter","id","notificationId"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/notifications/reducer.ts"],"sourcesContent":["import { ChainId } from '../../constants'\nimport { Notification, Notifications } from './model'\n\ninterface AddNotification {\n  type: 'ADD_NOTIFICATION'\n  chainId: ChainId\n  notification: Notification\n}\n\ninterface RemoveNotification {\n  type: 'REMOVE_NOTIFICATION'\n  chainId: ChainId\n  notificationId: string\n}\n\ntype Action = AddNotification | RemoveNotification\n\nexport function notificationReducer(state: Notifications, action: Action): Notifications {\n  const { chainId } = action\n  const chainState = state[chainId] ?? []\n\n  switch (action.type) {\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        [chainId]: [action.notification, ...chainState],\n      }\n    case 'REMOVE_NOTIFICATION': {\n      return {\n        ...state,\n        [chainId]: chainState.filter((notification) => notification.id !== action.notificationId),\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}