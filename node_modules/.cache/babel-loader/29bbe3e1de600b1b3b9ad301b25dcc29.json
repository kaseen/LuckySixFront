{"ast":null,"code":"'use strict';\n\nfunction _interpolate(envValue, environment, config) {\n  const matches = envValue.match(/(.?\\${*[\\w]*(?::-)?[\\w]*}*)/g) || [];\n  return matches.reduce(function (newEnv, match, index) {\n    const parts = /(.?)\\${*([\\w]*(?::-)?[\\w]*)?}*/g.exec(match);\n\n    if (!parts || parts.length === 0) {\n      return newEnv;\n    }\n\n    const prefix = parts[1];\n    let value, replacePart;\n\n    if (prefix === '\\\\') {\n      replacePart = parts[0];\n      value = replacePart.replace('\\\\$', '$');\n    } else {\n      const keyParts = parts[2].split(':-');\n      const key = keyParts[0];\n      replacePart = parts[0].substring(prefix.length); // process.env value 'wins' over .env file's value\n\n      value = Object.prototype.hasOwnProperty.call(environment, key) ? environment[key] : config.parsed[key] || keyParts[1] || ''; // If the value is found, remove nested expansions.\n\n      if (keyParts.length > 1 && value) {\n        const replaceNested = matches[index + 1];\n        matches[index + 1] = '';\n        newEnv = newEnv.replace(replaceNested, '');\n      } // Resolve recursive interpolations\n\n\n      value = _interpolate(value, environment, config);\n    }\n\n    return newEnv.replace(replacePart, value);\n  }, envValue);\n}\n\nfunction expand(config) {\n  // if ignoring process.env, use a blank object\n  const environment = config.ignoreProcessEnv ? {} : process.env;\n\n  for (const configKey in config.parsed) {\n    const value = Object.prototype.hasOwnProperty.call(environment, configKey) ? environment[configKey] : config.parsed[configKey];\n    config.parsed[configKey] = _interpolate(value, environment, config);\n  }\n\n  for (const processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey];\n  }\n\n  return config;\n}\n\nmodule.exports.expand = expand;","map":{"version":3,"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/dotenv-expand/lib/main.js"],"names":["_interpolate","envValue","environment","config","matches","match","reduce","newEnv","index","parts","exec","length","prefix","value","replacePart","replace","keyParts","split","key","substring","Object","prototype","hasOwnProperty","call","parsed","replaceNested","expand","ignoreProcessEnv","process","env","configKey","processKey","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nfunction _interpolate (envValue, environment, config) {\n  const matches = envValue.match(/(.?\\${*[\\w]*(?::-)?[\\w]*}*)/g) || []\n\n  return matches.reduce(function (newEnv, match, index) {\n    const parts = /(.?)\\${*([\\w]*(?::-)?[\\w]*)?}*/g.exec(match)\n    if (!parts || parts.length === 0) {\n      return newEnv\n    }\n\n    const prefix = parts[1]\n\n    let value, replacePart\n\n    if (prefix === '\\\\') {\n      replacePart = parts[0]\n      value = replacePart.replace('\\\\$', '$')\n    } else {\n      const keyParts = parts[2].split(':-')\n      const key = keyParts[0]\n      replacePart = parts[0].substring(prefix.length)\n      // process.env value 'wins' over .env file's value\n      value = Object.prototype.hasOwnProperty.call(environment, key)\n        ? environment[key]\n        : (config.parsed[key] || keyParts[1] || '')\n\n      // If the value is found, remove nested expansions.\n      if (keyParts.length > 1 && value) {\n        const replaceNested = matches[index + 1]\n        matches[index + 1] = ''\n\n        newEnv = newEnv.replace(replaceNested, '')\n      }\n      // Resolve recursive interpolations\n      value = _interpolate(value, environment, config)\n    }\n\n    return newEnv.replace(replacePart, value)\n  }, envValue)\n}\n\nfunction expand (config) {\n  // if ignoring process.env, use a blank object\n  const environment = config.ignoreProcessEnv ? {} : process.env\n\n  for (const configKey in config.parsed) {\n    const value = Object.prototype.hasOwnProperty.call(environment, configKey) ? environment[configKey] : config.parsed[configKey]\n\n    config.parsed[configKey] = _interpolate(value, environment, config)\n  }\n\n  for (const processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey]\n  }\n\n  return config\n}\n\nmodule.exports.expand = expand\n"]},"metadata":{},"sourceType":"script"}