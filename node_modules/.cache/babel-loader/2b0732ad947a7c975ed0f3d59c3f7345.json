{"ast":null,"code":"import { useCallback } from 'react';\nimport { useInjectedNetwork, useNetwork } from '../providers';\nimport { useLocalStorage } from './useLocalStorage';\nexport function useEthers() {\n  const {\n    network: {\n      provider,\n      chainId,\n      accounts,\n      errors\n    },\n    deactivate,\n    activate\n  } = useNetwork();\n  const {\n    injectedProvider,\n    connect\n  } = useInjectedNetwork();\n  const [, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const result = {\n    connector: undefined,\n    library: provider,\n    chainId,\n    account: accounts[0],\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n\n      return activate(providerOrConnector);\n    },\n    deactivate: () => {\n      deactivate();\n      setShouldConnectMetamask(false);\n    },\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error: errors[errors.length - 1]\n  };\n  const activateBrowserWallet = useCallback(async () => {\n    if (!injectedProvider) {\n      return;\n    }\n\n    await connect();\n    await result.activate(injectedProvider);\n    setShouldConnectMetamask(true);\n  }, [injectedProvider]);\n  return Object.assign(Object.assign({}, result), {\n    activateBrowserWallet\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,cAA/C;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AAoBA,OAAM,SAAUC,SAAV,GAAmB;AACvB,QAAM;AACJC,WAAO,EAAE;AAAEC,cAAF;AAAYC,aAAZ;AAAqBC,cAArB;AAA+BC;AAA/B,KADL;AAEJC,cAFI;AAGJC;AAHI,MAIFT,UAAU,EAJd;AAKA,QAAM;AAAEU,oBAAF;AAAoBC;AAApB,MAAgCZ,kBAAkB,EAAxD;AACA,QAAM,GAAGa,wBAAH,IAA+BX,eAAe,CAAC,uBAAD,CAApD;AAEA,QAAMY,MAAM,GAAG;AACbC,aAAS,EAAEC,SADE;AAEbC,WAAO,EAAEZ,QAFI;AAGbC,WAHa;AAIbY,WAAO,EAAEX,QAAQ,CAAC,CAAD,CAJJ;AAKbY,UAAM,EAAE,CAAC,CAACd,QALG;AAMbK,YAAQ,EAAE,MAAOU,mBAAP,IAAkD;AAC1D,UAAI,iBAAiBA,mBAArB,EAA0C;AACxCC,eAAO,CAACC,IAAR,CAAa,gFAAb;AACA,cAAMF,mBAAmB,CAACV,QAApB,EAAN;AACA,eAAOA,QAAQ,CAAC,MAAMU,mBAAmB,CAACG,WAApB,EAAP,CAAf;AACD;;AACD,aAAOb,QAAQ,CAACU,mBAAD,CAAf;AACD,KAbY;AAcbX,cAAU,EAAE,MAAK;AACfA,gBAAU;AACVI,8BAAwB,CAAC,KAAD,CAAxB;AACD,KAjBY;AAmBbW,YAAQ,EAAE,MAAK;AACb,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD,KArBY;AAuBbC,SAAK,EAAElB,MAAM,CAACA,MAAM,CAACmB,MAAP,GAAgB,CAAjB;AAvBA,GAAf;AA0BA,QAAMC,qBAAqB,GAAG7B,WAAW,CAAC,YAAW;AACnD,QAAI,CAACY,gBAAL,EAAuB;AACrB;AACD;;AACD,UAAMC,OAAO,EAAb;AACA,UAAME,MAAM,CAACJ,QAAP,CAAgBC,gBAAhB,CAAN;AACAE,4BAAwB,CAAC,IAAD,CAAxB;AACD,GAPwC,EAOtC,CAACF,gBAAD,CAPsC,CAAzC;AASA,yCAAYG,MAAZ,GAAkB;AAAEc;AAAF,GAAlB;AACD","names":["useCallback","useInjectedNetwork","useNetwork","useLocalStorage","useEthers","network","provider","chainId","accounts","errors","deactivate","activate","injectedProvider","connect","setShouldConnectMetamask","result","connector","undefined","library","account","active","providerOrConnector","console","warn","getProvider","setError","Error","error","length","activateBrowserWallet"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/hooks/useEthers.ts"],"sourcesContent":["import { useCallback } from 'react'\nimport { JsonRpcProvider } from '@ethersproject/providers'\nimport { ChainId } from '../constants'\nimport { useInjectedNetwork, useNetwork } from '../providers'\nimport { EventEmitter } from 'events'\nimport { useLocalStorage } from './useLocalStorage'\n\ntype SupportedProviders =\n  | JsonRpcProvider\n  | EventEmitter\n  | { getProvider: () => JsonRpcProvider | EventEmitter; activate: () => Promise<void> }\n\nexport type Web3Ethers = {\n  activate: (provider: SupportedProviders) => Promise<void>\n  setError: (error: Error) => void\n  deactivate: () => void\n  connector: undefined\n  chainId?: ChainId\n  account?: null | string\n  error?: Error\n  library?: JsonRpcProvider\n  active: boolean\n  activateBrowserWallet: () => void\n}\n\nexport function useEthers(): Web3Ethers {\n  const {\n    network: { provider, chainId, accounts, errors },\n    deactivate,\n    activate,\n  } = useNetwork()\n  const { injectedProvider, connect } = useInjectedNetwork()\n  const [, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask')\n\n  const result = {\n    connector: undefined,\n    library: provider,\n    chainId,\n    account: accounts[0],\n    active: !!provider,\n    activate: async (providerOrConnector: SupportedProviders) => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.')\n        await providerOrConnector.activate()\n        return activate(await providerOrConnector.getProvider())\n      }\n      return activate(providerOrConnector)\n    },\n    deactivate: () => {\n      deactivate()\n      setShouldConnectMetamask(false)\n    },\n\n    setError: () => {\n      throw new Error('setError is deprecated')\n    },\n\n    error: errors[errors.length - 1],\n  }\n\n  const activateBrowserWallet = useCallback(async () => {\n    if (!injectedProvider) {\n      return\n    }\n    await connect()\n    await result.activate(injectedProvider)\n    setShouldConnectMetamask(true)\n  }, [injectedProvider])\n\n  return { ...result, activateBrowserWallet }\n}\n"]},"metadata":{},"sourceType":"module"}