{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n  const {\n    chainId,\n    account\n  } = useEthers();\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  const addNotification = useCallback(_ref2 => {\n    let {\n      notification,\n      chainId\n    } = _ref2;\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      chainId,\n      notification: Object.assign(Object.assign({}, notification), {\n        id: nanoid()\n      })\n    });\n  }, [dispatch]);\n  const removeNotification = useCallback(_ref3 => {\n    let {\n      notificationId,\n      chainId\n    } = _ref3;\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      chainId,\n      notificationId\n    });\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification,\n      notifications,\n      removeNotification\n    },\n    children: children\n  }, void 0);\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,WAApB,EAAiCC,SAAjC,EAA4CC,UAA5C,QAA8D,OAA9D;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAAiCC,qBAAjC,QAAyF,SAAzF;AACA,SAASC,mBAAT,QAAoC,WAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAMA,OAAM,SAAUC,qBAAV,OAAmD;AAAA,MAAnB;AAAEC;AAAF,GAAmB;AACvD,QAAM,CAACC,aAAD,EAAgBC,QAAhB,IAA4BT,UAAU,CAACI,mBAAD,EAAsBD,qBAAtB,CAA5C;AACA,QAAM;AAAEO,WAAF;AAAWC;AAAX,MAAuBV,SAAS,EAAtC;AAEAF,WAAS,CAAC,MAAK;AACb,QAAIY,OAAO,IAAID,OAAf,EAAwB;AACtBD,cAAQ,CAAC;AACPG,YAAI,EAAE,kBADC;AAEPF,eAAO,EAAEA,OAFF;AAGPG,oBAAY,EAAE;AACZD,cAAI,EAAE,iBADM;AAEZE,YAAE,EAAET,MAAM,EAFE;AAGZU,qBAAW,EAAEC,IAAI,CAACC,GAAL,EAHD;AAIZC,iBAAO,EAAEP;AAJG;AAHP,OAAD,CAAR;AAUD;AACF,GAbQ,EAaN,CAACA,OAAD,EAAUD,OAAV,CAbM,CAAT;AAeA,QAAMS,eAAe,GAAGrB,WAAW,CACjC,SAAsD;AAAA,QAArD;AAAEe,kBAAF;AAAgBH;AAAhB,KAAqD;AACpDD,YAAQ,CAAC;AACPG,UAAI,EAAE,kBADC;AAEPF,aAFO;AAGPG,kBAAY,kCAAOA,YAAP,GAAmB;AAAEC,UAAE,EAAET,MAAM;AAAZ,OAAnB;AAHL,KAAD,CAAR;AAKD,GAPgC,EAQjC,CAACI,QAAD,CARiC,CAAnC;AAWA,QAAMW,kBAAkB,GAAGtB,WAAW,CACpC,SAA2D;AAAA,QAA1D;AAAEuB,oBAAF;AAAkBX;AAAlB,KAA0D;AACzDD,YAAQ,CAAC;AACPG,UAAI,EAAE,qBADC;AAEPF,aAFO;AAGPW;AAHO,KAAD,CAAR;AAKD,GAPmC,EAQpC,CAACZ,QAAD,CARoC,CAAtC;AAWA,SACEa,KAACpB,oBAAoB,CAACqB,QAAtB,EAA8B;AAACC,SAAK,EAAE;AAAEL,qBAAF;AAAmBX,mBAAnB;AAAkCY;AAAlC,KAAR;AAAgEb,YAAQ,EAAEA;AAA1E,GAA9B,EAAgH,MAAhH,CADF;AAGD","names":["useCallback","useEffect","useReducer","useEthers","NotificationsContext","DEFAULT_NOTIFICATIONS","notificationReducer","nanoid","NotificationsProvider","children","notifications","dispatch","chainId","account","type","notification","id","submittedAt","Date","now","address","addNotification","removeNotification","notificationId","_jsx","Provider","value"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/notifications/provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers } from '../../hooks'\nimport { NotificationsContext } from './context'\nimport { AddNotificationPayload, DEFAULT_NOTIFICATIONS, RemoveNotificationPayload } from './model'\nimport { notificationReducer } from './reducer'\nimport { nanoid } from 'nanoid'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function NotificationsProvider({ children }: Props) {\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS)\n  const { chainId, account } = useEthers()\n\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account,\n        },\n      })\n    }\n  }, [account, chainId])\n\n  const addNotification = useCallback(\n    ({ notification, chainId }: AddNotificationPayload) => {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId,\n        notification: { ...notification, id: nanoid() },\n      })\n    },\n    [dispatch]\n  )\n\n  const removeNotification = useCallback(\n    ({ notificationId, chainId }: RemoveNotificationPayload) => {\n      dispatch({\n        type: 'REMOVE_NOTIFICATION',\n        chainId,\n        notificationId,\n      })\n    },\n    [dispatch]\n  )\n\n  return (\n    <NotificationsContext.Provider value={{ addNotification, notifications, removeNotification }} children={children} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}