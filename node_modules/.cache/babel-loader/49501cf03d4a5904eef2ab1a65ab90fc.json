{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebouncePair, useEthers } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { callsReducer } from './callsReducer';\nimport { multicall as multicall1 } from './multicall';\nimport { notifyDevtools } from '../devtools';\nimport { useDevtoolsReporting } from './useDevtoolsReporting';\nimport { useNetwork } from '../../providers';\nimport { getUniqueCalls } from '../../helpers';\nimport { multicall2 } from './multicall2';\nimport { chainStateReducer } from './chainStateReducer';\nimport { useConfig } from '../config';\nimport { ChainStateContext } from './context';\nexport function ChainStateProvider(_ref) {\n  let {\n    children,\n    multicallAddresses\n  } = _ref;\n  const {\n    multicallVersion\n  } = useConfig();\n  const multicall = multicallVersion === 1 ? multicall1 : multicall2;\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const blockNumber = useBlockNumber();\n  const {\n    reportError\n  } = useNetwork();\n  const [calls, dispatchCalls] = useReducer(callsReducer, []);\n  const [state, dispatchState] = useReducer(chainStateReducer, {});\n  const [debouncedCalls, debouncedId] = useDebouncePair(calls, chainId, 50);\n  const uniqueCalls = debouncedId === chainId ? getUniqueCalls(debouncedCalls) : []; // used for deep equality in hook dependencies\n\n  const uniqueCallsJSON = JSON.stringify(uniqueCalls);\n  const multicallAddress = chainId !== undefined ? multicallAddresses[chainId] : undefined;\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses);\n  useEffect(() => {\n    if (library && blockNumber !== undefined && chainId !== undefined) {\n      if (!multicallAddress) {\n        console.error(`Missing multicall address for chain id ${chainId}`);\n        return;\n      }\n\n      const start = Date.now();\n      multicall(library, multicallAddress, blockNumber, uniqueCalls).then(state => {\n        dispatchState({\n          type: 'FETCH_SUCCESS',\n          blockNumber,\n          chainId,\n          state\n        });\n        notifyDevtools({\n          type: 'MULTICALL_SUCCESS',\n          duration: Date.now() - start,\n          chainId,\n          blockNumber,\n          multicallAddress,\n          state\n        });\n      }).catch(error => {\n        reportError(error);\n        dispatchState({\n          type: 'FETCH_ERROR',\n          blockNumber,\n          chainId,\n          error\n        });\n        notifyDevtools({\n          type: 'MULTICALL_ERROR',\n          duration: Date.now() - start,\n          chainId,\n          blockNumber,\n          multicallAddress,\n          calls: uniqueCalls,\n          error\n        });\n      });\n    }\n  }, [library, blockNumber, chainId, multicallAddress, uniqueCallsJSON]);\n  const value = chainId !== undefined ? state[chainId] : undefined;\n  const provided = {\n    value,\n    multicallAddress,\n    dispatchCalls\n  };\n  return _jsx(ChainStateContext.Provider, {\n    value: provided,\n    children: children\n  }, void 0);\n}","map":{"version":3,"mappings":"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","names":["useEffect","useReducer","useDebouncePair","useEthers","useBlockNumber","callsReducer","multicall","multicall1","notifyDevtools","useDevtoolsReporting","useNetwork","getUniqueCalls","multicall2","chainStateReducer","useConfig","ChainStateContext","ChainStateProvider","children","multicallAddresses","multicallVersion","library","chainId","blockNumber","reportError","calls","dispatchCalls","state","dispatchState","debouncedCalls","debouncedId","uniqueCalls","uniqueCallsJSON","JSON","stringify","multicallAddress","undefined","console","error","start","Date","now","then","type","duration","catch","value","provided","_jsx","Provider"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/chainState/provider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useReducer } from 'react'\nimport { useDebouncePair, useEthers } from '../../hooks'\nimport { useBlockNumber } from '../blockNumber/context'\nimport { callsReducer } from './callsReducer'\nimport { multicall as multicall1 } from './multicall'\nimport { notifyDevtools } from '../devtools'\nimport { useDevtoolsReporting } from './useDevtoolsReporting'\nimport { useNetwork } from '../../providers'\nimport { getUniqueCalls } from '../../helpers'\nimport { multicall2 } from './multicall2'\nimport { chainStateReducer } from './chainStateReducer'\nimport { useConfig } from '../config'\nimport { ChainStateContext } from './context'\n\ninterface Props {\n  children: ReactNode\n  multicallAddresses: {\n    [chainId: number]: string\n  }\n}\n\nexport function ChainStateProvider({ children, multicallAddresses }: Props) {\n  const { multicallVersion } = useConfig()\n  const multicall = multicallVersion === 1 ? multicall1 : multicall2\n  const { library, chainId } = useEthers()\n  const blockNumber = useBlockNumber()\n  const { reportError } = useNetwork()\n  const [calls, dispatchCalls] = useReducer(callsReducer, [])\n  const [state, dispatchState] = useReducer(chainStateReducer, {})\n\n  const [debouncedCalls, debouncedId] = useDebouncePair(calls, chainId, 50)\n  const uniqueCalls = debouncedId === chainId ? getUniqueCalls(debouncedCalls) : []\n  // used for deep equality in hook dependencies\n  const uniqueCallsJSON = JSON.stringify(uniqueCalls)\n\n  const multicallAddress = chainId !== undefined ? multicallAddresses[chainId] : undefined\n\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses)\n\n  useEffect(() => {\n    if (library && blockNumber !== undefined && chainId !== undefined) {\n      if (!multicallAddress) {\n        console.error(`Missing multicall address for chain id ${chainId}`)\n        return\n      }\n      const start = Date.now()\n      multicall(library, multicallAddress, blockNumber, uniqueCalls)\n        .then((state) => {\n          dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state })\n          notifyDevtools({\n            type: 'MULTICALL_SUCCESS',\n            duration: Date.now() - start,\n            chainId,\n            blockNumber,\n            multicallAddress,\n            state,\n          })\n        })\n        .catch((error) => {\n          reportError(error)\n          dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error })\n          notifyDevtools({\n            type: 'MULTICALL_ERROR',\n            duration: Date.now() - start,\n            chainId,\n            blockNumber,\n            multicallAddress,\n            calls: uniqueCalls,\n            error,\n          })\n        })\n    }\n  }, [library, blockNumber, chainId, multicallAddress, uniqueCallsJSON])\n\n  const value = chainId !== undefined ? state[chainId] : undefined\n  const provided = { value, multicallAddress, dispatchCalls }\n\n  return <ChainStateContext.Provider value={provided} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}