{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n\n}\n\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport class Interface {\n  constructor(fragments) {\n    logger.checkNew(new.target, Interface);\n    let abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n\n        default:\n          return;\n      }\n\n      let signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n\n    const abi = this.fragments.map(fragment => fragment.format(format)); // We need to re-bundle the JSON fragments a bit\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n\n    return abi;\n  } // Sub-classes can override these to handle other blockchains\n\n\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n\n  static getAddress(address) {\n    return getAddress(address);\n  }\n\n  static getSighash(functionFragment) {\n    return hexDataSlice(id(functionFragment.format()), 0, 4);\n  }\n\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n\n      return this.functions[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n\n      return this.events[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n\n    return result;\n  } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n  getSighash(functionFragment) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return getStatic(this.constructor, \"getSighash\")(functionFragment);\n  } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  } // Decode the data for a function call (e.g. tx.data)\n\n\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  } // Encode the data for a function call (e.g. tx.data)\n\n\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  } // Decode the result from a function call (e.g. from eth_call)\n\n\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    let bytes = arrayify(data);\n    let reason = null;\n    let errorSignature = null;\n\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n\n        break;\n\n      case 4:\n        if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n          errorSignature = \"Error(string)\";\n          reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        }\n\n        break;\n    }\n\n    return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorSignature: errorSignature,\n      errorArgs: [reason],\n      reason: reason\n    });\n  } // Encode the result for a function call (e.g. for eth_call)\n\n\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n\n    let topics = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      } // Check addresses are valid\n\n\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n\n      return hexZeroPad(hexlify(value), 32);\n    };\n\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n\n        return;\n      }\n\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  }\n\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TOOD\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  } // Decode a filter for the event and the search criteria\n\n\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n\n      topics = topics.slice(1);\n    }\n\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n    let result = [];\n    let nonIndexedIndex = 0,\n        indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      } // Add the keyword argument if named and safe\n\n\n      if (param.name && result[param.name] == null) {\n        const value = result[index]; // Make error named values throw on access\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    }); // Make all error indexed values throw on access\n\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n\n    return Object.freeze(result);\n  } // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n\n\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  } // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n\n\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n\n    if (!fragment || fragment.anonymous) {\n      return null;\n    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n\n\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","Indexed","isIndexed","value","_isIndexed","wrapAccessError","property","error","wrap","Error","Interface","constructor","fragments","checkNew","new","target","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","signature","format","payable","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","functionFragment","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","name","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","inputs","decodeFunctionData","bytes","slice","encodeFunctionData","decodeFunctionResult","reason","errorSignature","_getWordSize","outputs","throwError","errors","CALL_EXCEPTION","method","errorArgs","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","isInterface","_isInterface"],"sources":["../src.ts/interface.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}