{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\n\nconst isDroppedAndReplaced = e => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n\nexport function usePromiseTransaction(chainId, options) {\n  const [state, setState] = useState({\n    status: 'None'\n  });\n  const {\n    addTransaction\n  } = useTransactionsContext();\n  const {\n    addNotification\n  } = useNotificationsContext();\n  const resetState = useCallback(() => {\n    setState({\n      status: 'None'\n    });\n  }, [setState]);\n  const promiseTransaction = useCallback(async transactionPromise => {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!chainId) return;\n    let transaction = undefined;\n\n    try {\n      setState({\n        status: 'PendingSignature',\n        chainId\n      });\n      transaction = await transactionPromise;\n      setState({\n        transaction,\n        status: 'Mining',\n        chainId\n      });\n      addTransaction({\n        transaction: Object.assign(Object.assign({}, transaction), {\n          chainId: chainId\n        }),\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      const receipt = await transaction.wait();\n      setState({\n        receipt,\n        transaction,\n        status: 'Success',\n        chainId\n      });\n      return receipt;\n    } catch (e) {\n      const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n\n      if (transaction) {\n        const droppedAndReplaced = isDroppedAndReplaced(e);\n\n        if (droppedAndReplaced) {\n          const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n          const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n          addNotification({\n            notification: {\n              type,\n              submittedAt: Date.now(),\n              transaction: e.replacement,\n              receipt: e.receipt,\n              transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n              originalTransaction: transaction\n            },\n            chainId\n          });\n          setState({\n            status,\n            transaction: e.replacement,\n            originalTransaction: transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        } else {\n          setState({\n            status: 'Fail',\n            transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        }\n      } else {\n        setState({\n          status: 'Exception',\n          errorMessage,\n          chainId\n        });\n      }\n\n      return undefined;\n    }\n  }, [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"mappings":"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","names":["useCallback","useState","useNotificationsContext","useTransactionsContext","errors","isDroppedAndReplaced","e","code","TRANSACTION_REPLACED","replacement","reason","cancelled","usePromiseTransaction","chainId","options","state","setState","status","addTransaction","addNotification","resetState","promiseTransaction","transactionPromise","transaction","undefined","submittedAt","Date","now","transactionName","receipt","wait","errorMessage","error","_a","message","_b","_c","data","_d","_e","droppedAndReplaced","type","notification","_f","originalTransaction"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/hooks/usePromiseTransaction.ts"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/abstract-provider'\nimport { useCallback, useState } from 'react'\nimport { useNotificationsContext, useTransactionsContext } from '../providers'\nimport { TransactionStatus, TransactionOptions } from '../../src'\nimport { TransactionState } from '../model'\nimport { errors } from 'ethers'\n\nconst isDroppedAndReplaced = (e: any) =>\n  e?.code === errors.TRANSACTION_REPLACED && e?.replacement && (e?.reason === 'repriced' || e?.cancelled === false)\n\nexport function usePromiseTransaction(chainId: number | undefined, options?: TransactionOptions) {\n  const [state, setState] = useState<TransactionStatus>({ status: 'None' })\n  const { addTransaction } = useTransactionsContext()\n  const { addNotification } = useNotificationsContext()\n\n  const resetState = useCallback(() => {\n    setState({ status: 'None' })\n  }, [setState])\n\n  const promiseTransaction = useCallback(\n    async (transactionPromise: Promise<TransactionResponse>) => {\n      if (!chainId) return\n      let transaction: TransactionResponse | undefined = undefined\n      try {\n        setState({ status: 'PendingSignature', chainId })\n\n        transaction = await transactionPromise\n\n        setState({ transaction, status: 'Mining', chainId })\n        addTransaction({\n          transaction: {\n            ...transaction,\n            chainId: chainId,\n          },\n          submittedAt: Date.now(),\n          transactionName: options?.transactionName,\n        })\n        const receipt = await transaction.wait()\n        setState({ receipt, transaction, status: 'Success', chainId })\n        return receipt\n      } catch (e: any) {\n        const errorMessage = e.error?.message ?? e.reason ?? e.data?.message ?? e.message\n        if (transaction) {\n          const droppedAndReplaced = isDroppedAndReplaced(e)\n\n          if (droppedAndReplaced) {\n            const status: TransactionState = e.receipt.status === 0 ? 'Fail' : 'Success'\n            const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed'\n\n            addNotification({\n              notification: {\n                type,\n                submittedAt: Date.now(),\n                transaction: e.replacement,\n                receipt: e.receipt,\n                transactionName: e.replacement?.transactionName,\n                originalTransaction: transaction,\n              },\n              chainId,\n            })\n\n            setState({\n              status,\n              transaction: e.replacement,\n              originalTransaction: transaction,\n              receipt: e.receipt,\n              errorMessage,\n              chainId,\n            })\n          } else {\n            setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId })\n          }\n        } else {\n          setState({ status: 'Exception', errorMessage, chainId })\n        }\n        return undefined\n      }\n    },\n    [chainId, setState, addTransaction, options]\n  )\n\n  return { promiseTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}