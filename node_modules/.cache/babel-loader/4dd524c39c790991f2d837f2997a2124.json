{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\nexport function useTransactions() {\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const {\n    addTransaction,\n    transactions\n  } = useTransactionsContext();\n  const filtered = useMemo(() => {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter(x => x.transaction.from === account);\n  }, [transactions, chainId, account]);\n  return {\n    transactions: filtered,\n    addTransaction\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,sBAAT,QAAuC,cAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAM,SAAUC,eAAV,GAAyB;AAC7B,QAAM;AAAEC,WAAF;AAAWC;AAAX,MAAuBH,SAAS,EAAtC;AACA,QAAM;AAAEI,kBAAF;AAAkBC;AAAlB,MAAmCN,sBAAsB,EAA/D;AAEA,QAAMO,QAAQ,GAAGR,OAAO,CAAC,MAAK;;;AAC5B,QAAII,OAAO,KAAKK,SAAZ,IAAyB,CAACJ,OAA9B,EAAuC;AACrC,aAAO,EAAP;AACD;;AACD,WAAO,OAACE,YAAY,CAACH,OAAD,CAAb,MAAsB,IAAtB,IAAsBM,aAAtB,GAAsBA,EAAtB,GAA0B,EAA1B,EAA8BC,MAA9B,CAAsCC,CAAD,IAAOA,CAAC,CAACC,WAAF,CAAcC,IAAd,KAAuBT,OAAnE,CAAP;AACD,GALuB,EAKrB,CAACE,YAAD,EAAeH,OAAf,EAAwBC,OAAxB,CALqB,CAAxB;AAOA,SAAO;AACLE,gBAAY,EAAEC,QADT;AAELF;AAFK,GAAP;AAID","names":["useMemo","useTransactionsContext","useEthers","useTransactions","chainId","account","addTransaction","transactions","filtered","undefined","_a","filter","x","transaction","from"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/hooks/useTransactions.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { useTransactionsContext } from '../providers'\nimport { useEthers } from './useEthers'\n\nexport function useTransactions() {\n  const { chainId, account } = useEthers()\n  const { addTransaction, transactions } = useTransactionsContext()\n\n  const filtered = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return (transactions[chainId] ?? []).filter((x) => x.transaction.from === account)\n  }, [transactions, chainId, account])\n\n  return {\n    transactions: filtered,\n    addTransaction,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}