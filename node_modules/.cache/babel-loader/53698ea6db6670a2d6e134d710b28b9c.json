{"ast":null,"code":"import { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\nexport function useSendTransaction(options) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(chainId, options);\n\n  const sendTransaction = async transactionRequest => {\n    const signer = (options === null || options === void 0 ? void 0 : options.signer) || (library === null || library === void 0 ? void 0 : library.getSigner());\n\n    if (signer) {\n      await promiseTransaction(signer.sendTransaction(transactionRequest));\n    }\n  };\n\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,OAAM,SAAUC,kBAAV,CAA6BC,OAA7B,EAAyD;AAC7D,QAAM;AAAEC,WAAF;AAAWC;AAAX,MAAuBL,SAAS,EAAtC;AACA,QAAM;AAAEM,sBAAF;AAAsBC,SAAtB;AAA6BC;AAA7B,MAA4CP,qBAAqB,CAACI,OAAD,EAAUF,OAAV,CAAvE;;AAEA,QAAMM,eAAe,GAAG,MAAOC,kBAAP,IAAiD;AACvE,UAAMC,MAAM,GAAG,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,MAAmBP,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEQ,SAAT,EAAnB,CAAf;;AACA,QAAID,MAAJ,EAAY;AACV,YAAML,kBAAkB,CAACK,MAAM,CAACF,eAAP,CAAuBC,kBAAvB,CAAD,CAAxB;AACD;AACF,GALD;;AAOA,SAAO;AAAED,mBAAF;AAAmBF,SAAnB;AAA0BC;AAA1B,GAAP;AACD","names":["useEthers","usePromiseTransaction","useSendTransaction","options","library","chainId","promiseTransaction","state","resetState","sendTransaction","transactionRequest","signer","getSigner"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/hooks/useSendTransaction.ts"],"sourcesContent":["import { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions } from '../../src'\nimport { useEthers } from './useEthers'\nimport { usePromiseTransaction } from './usePromiseTransaction'\n\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = options?.signer || library?.getSigner()\n    if (signer) {\n      await promiseTransaction(signer.sendTransaction(transactionRequest))\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}