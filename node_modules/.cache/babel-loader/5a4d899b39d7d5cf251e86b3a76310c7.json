{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networksReducer } from './reducer';\nimport { JsonRpcProvider, Web3Provider } from '@ethersproject/providers';\nimport { subscribeToProviderEvents } from '../../helpers/eip1193';\n\nasync function tryToGetAccount(provider) {\n  try {\n    return await provider.getSigner().getAddress();\n  } catch (e) {\n    if (e.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined;\n    }\n\n    throw e;\n  }\n}\n\nexport function NetworkProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState);\n  const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n  const update = useCallback(newNetwork => {\n    dispatch({\n      type: 'UPDATE_NETWORK',\n      network: newNetwork\n    });\n  }, [network]);\n  const reportError = useCallback(error => {\n    console.error(error);\n    dispatch({\n      type: 'ADD_ERROR',\n      error\n    });\n  }, []);\n  const deactivate = useCallback(() => {\n    update({\n      accounts: []\n    });\n  }, []);\n  const onDisconnect = useCallback(error => {\n    deactivate();\n    reportError(error);\n  }, []);\n  const activate = useCallback(async provider => {\n    var _a;\n\n    const wrappedProvider = provider instanceof JsonRpcProvider ? provider : new Web3Provider(provider);\n\n    try {\n      const account = await tryToGetAccount(wrappedProvider);\n      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;\n      onUnsubscribe();\n      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect);\n      setOnUnsubscribe(() => clearSubscriptions);\n      update({\n        provider: wrappedProvider,\n        chainId,\n        accounts: account ? [account] : []\n      });\n    } catch (e) {\n      reportError(e);\n    }\n  }, [onUnsubscribe]);\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      network,\n      update,\n      activate,\n      deactivate,\n      reportError\n    },\n    children: children\n  }, void 0);\n}","map":{"version":3,"mappings":"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","names":["useCallback","useReducer","useState","NetworkContext","defaultNetworkState","networksReducer","JsonRpcProvider","Web3Provider","subscribeToProviderEvents","tryToGetAccount","provider","getSigner","getAddress","e","code","undefined","NetworkProvider","children","network","dispatch","onUnsubscribe","setOnUnsubscribe","update","newNetwork","type","reportError","error","console","deactivate","accounts","onDisconnect","activate","wrappedProvider","account","chainId","getNetwork","_a","clearSubscriptions","_jsx","Provider","value"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/network/provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useReducer, useState } from 'react'\nimport { NetworkContext } from './context'\nimport { defaultNetworkState, networksReducer } from './reducer'\nimport { Network } from './model'\nimport { JsonRpcProvider, Web3Provider, ExternalProvider } from '@ethersproject/providers'\nimport { EventEmitter } from 'events'\nimport { subscribeToProviderEvents } from '../../helpers/eip1193'\n\ninterface NetworkProviderProps {\n  children: ReactNode\n}\n\nasync function tryToGetAccount(provider: JsonRpcProvider) {\n  try {\n    return await provider.getSigner().getAddress()\n  } catch (e) {\n    if (e.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined\n    }\n    throw e\n  }\n}\n\nexport function NetworkProvider({ children }: NetworkProviderProps) {\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState)\n  const [onUnsubscribe, setOnUnsubscribe] = useState<() => void>(() => () => undefined)\n\n  const update = useCallback(\n    (newNetwork: Partial<Network>) => {\n      dispatch({ type: 'UPDATE_NETWORK', network: newNetwork })\n    },\n    [network]\n  )\n\n  const reportError = useCallback((error: Error) => {\n    console.error(error)\n    dispatch({ type: 'ADD_ERROR', error })\n  }, [])\n\n  const deactivate = useCallback(() => {\n    update({\n      accounts: [],\n    })\n  }, [])\n\n  const onDisconnect = useCallback((error) => {\n    deactivate()\n    reportError(error)\n  }, [])\n\n  const activate = useCallback(\n    async (provider: JsonRpcProvider | (EventEmitter & ExternalProvider)) => {\n      const wrappedProvider = provider instanceof JsonRpcProvider ? provider : new Web3Provider(provider)\n      try {\n        const account = await tryToGetAccount(wrappedProvider)\n        const chainId = (await wrappedProvider.getNetwork())?.chainId\n        onUnsubscribe()\n        const clearSubscriptions = subscribeToProviderEvents((wrappedProvider as any).provider, update, onDisconnect)\n        setOnUnsubscribe(() => clearSubscriptions)\n        update({\n          provider: wrappedProvider,\n          chainId,\n          accounts: account ? [account] : [],\n        })\n      } catch (e) {\n        reportError(e)\n      }\n    },\n    [onUnsubscribe]\n  )\n\n  return <NetworkContext.Provider value={{ network, update, activate, deactivate, reportError }} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}