{"ast":null,"code":"\"use strict\";\n\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    this.coders = coders;\n  }\n\n  encode(writer, value) {\n    return pack(writer, this.coders, value);\n  }\n\n  decode(reader) {\n    return reader.coerce(this.name, unpack(reader, this.coders));\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,KAAT,QAAsC,kBAAtC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,SAA7B;AAEA,OAAM,MAAOC,UAAP,SAA0BH,KAA1B,CAA+B;AAGjCI,cAAYC,MAAZ,EAAkCC,SAAlC,EAAmD;AAC/C,QAAIC,OAAO,GAAG,KAAd;AACA,UAAMC,KAAK,GAAkB,EAA7B;AACAH,UAAM,CAACI,OAAP,CAAgBC,KAAD,IAAU;AACrB,UAAIA,KAAK,CAACH,OAAV,EAAmB;AAAEA,eAAO,GAAG,IAAV;AAAiB;;AACtCC,WAAK,CAACG,IAAN,CAAWD,KAAK,CAACE,IAAjB;AACH,KAHD;AAIA,UAAMA,IAAI,GAAI,WAAWJ,KAAK,CAACK,IAAN,CAAW,GAAX,CAAX,GAA6B,GAA3C;AAEA,UAAM,OAAN,EAAeD,IAAf,EAAqBN,SAArB,EAAgCC,OAAhC;AACA,SAAKF,MAAL,GAAcA,MAAd;AACH;;AAEDS,QAAM,CAACC,MAAD,EAAiBC,KAAjB,EAA8D;AAChE,WAAOf,IAAI,CAACc,MAAD,EAAS,KAAKV,MAAd,EAAsBW,KAAtB,CAAX;AACH;;AAEDC,QAAM,CAACC,MAAD,EAAe;AACjB,WAAOA,MAAM,CAACC,MAAP,CAAc,KAAKC,IAAnB,EAAyBlB,MAAM,CAACgB,MAAD,EAAS,KAAKb,MAAd,CAA/B,CAAP;AACH;;AAtBgC","names":["Coder","pack","unpack","TupleCoder","constructor","coders","localName","dynamic","types","forEach","coder","push","type","join","encode","writer","value","decode","reader","coerce","name"],"sources":["../../src.ts/coders/tuple.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}