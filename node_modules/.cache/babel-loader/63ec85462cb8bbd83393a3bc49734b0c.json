{"ast":null,"code":"import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../providers/config/context';\n\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  const timeFromCreation = creationTime => Date.now() - creationTime;\n\n  return notifications.filter(notification => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\n\nexport function useNotifications() {\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const {\n    addNotification,\n    notifications,\n    removeNotification\n  } = useNotificationsContext();\n  const {\n    notifications: {\n      checkInterval,\n      expirationPeriod\n    }\n  } = useConfig();\n  const chainNotifications = useMemo(() => {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(() => {\n    if (!chainId) {\n      return;\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n\n    for (const notification of expiredNotification) {\n      removeNotification({\n        notificationId: notification.id,\n        chainId\n      });\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAAuBC,uBAAvB,QAAsD,cAAtD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,6BAA1B;;AAEA,SAASC,uBAAT,CAAiCC,aAAjC,EAAgEC,gBAAhE,EAAwF;AACtF,QAAMC,gBAAgB,GAAIC,YAAD,IAA0BC,IAAI,CAACC,GAAL,KAAaF,YAAhE;;AAEA,SAAOH,aAAa,CAACM,MAAd,CAAsBC,YAAD,IAAkBL,gBAAgB,CAACK,YAAY,CAACC,WAAd,CAAhB,IAA8CP,gBAArF,CAAP;AACD;;AAED,OAAM,SAAUQ,gBAAV,GAA0B;AAC9B,QAAM;AAAEC,WAAF;AAAWC;AAAX,MAAuBf,SAAS,EAAtC;AACA,QAAM;AAAEgB,mBAAF;AAAmBZ,iBAAnB;AAAkCa;AAAlC,MAAyDlB,uBAAuB,EAAtF;AACA,QAAM;AACJK,iBAAa,EAAE;AAAEc,mBAAF;AAAiBb;AAAjB;AADX,MAEFH,SAAS,EAFb;AAIA,QAAMiB,kBAAkB,GAAGrB,OAAO,CAAC,MAAK;;;AACtC,QAAIgB,OAAO,KAAKM,SAAZ,IAAyB,CAACL,OAA9B,EAAuC;AACrC,aAAO,EAAP;AACD;;AACD,iBAAOX,aAAa,CAACU,OAAD,CAApB,MAA6B,IAA7B,IAA6BO,aAA7B,GAA6BA,EAA7B,GAAiC,EAAjC;AACD,GALiC,EAK/B,CAACjB,aAAD,EAAgBU,OAAhB,EAAyBC,OAAzB,CAL+B,CAAlC;AAOAd,aAAW,CAAC,MAAK;AACf,QAAI,CAACa,OAAL,EAAc;AACZ;AACD;;AAED,UAAMQ,mBAAmB,GAAGnB,uBAAuB,CAACgB,kBAAD,EAAqBd,gBAArB,CAAnD;;AACA,SAAK,MAAMM,YAAX,IAA2BW,mBAA3B,EAAgD;AAC9CL,wBAAkB,CAAC;AAAEM,sBAAc,EAAEZ,YAAY,CAACa,EAA/B;AAAmCV;AAAnC,OAAD,CAAlB;AACD;AACF,GATU,EASRI,aATQ,CAAX;AAWA,SAAO;AACLd,iBAAa,EAAEe,kBADV;AAELH,mBAFK;AAGLC;AAHK,GAAP;AAKD","names":["useMemo","useNotificationsContext","useEthers","useInterval","useConfig","getExpiredNotifications","notifications","expirationPeriod","timeFromCreation","creationTime","Date","now","filter","notification","submittedAt","useNotifications","chainId","account","addNotification","removeNotification","checkInterval","chainNotifications","undefined","_a","expiredNotification","notificationId","id"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/hooks/useNotifications.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Notification, useNotificationsContext } from '../providers'\nimport { useEthers } from './useEthers'\nimport { useInterval } from './useInterval'\nimport { useConfig } from '../providers/config/context'\n\nfunction getExpiredNotifications(notifications: Notification[], expirationPeriod: number) {\n  const timeFromCreation = (creationTime: number) => Date.now() - creationTime\n\n  return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod)\n}\n\nexport function useNotifications() {\n  const { chainId, account } = useEthers()\n  const { addNotification, notifications, removeNotification } = useNotificationsContext()\n  const {\n    notifications: { checkInterval, expirationPeriod },\n  } = useConfig()\n\n  const chainNotifications = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return notifications[chainId] ?? []\n  }, [notifications, chainId, account])\n\n  useInterval(() => {\n    if (!chainId) {\n      return\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod)\n    for (const notification of expiredNotification) {\n      removeNotification({ notificationId: notification.id, chainId })\n    }\n  }, checkInterval)\n\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}