{"ast":null,"code":"let hook;\n\nif (typeof window !== 'undefined') {\n  hook = window.__USEDAPP_DEVTOOLS_HOOK__;\n} // immediately notify devtools that the page is using it\n\n\nnotifyDevtools({\n  type: 'INIT'\n});\nexport function notifyDevtools(notification) {\n  if (!hook) {\n    return;\n  }\n\n  if (notification.type === 'INIT') {\n    hook.init();\n  } else {\n    if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {\n      notification.error = getErrorMessage(notification.error);\n    }\n\n    hook.send(notification);\n  }\n}\n\nfunction getErrorMessage(error) {\n  if (error instanceof Error) {\n    return error.message;\n  } else {\n    return '' + error;\n  }\n}","map":{"version":3,"mappings":"AAmEA,IAAIA,IAAJ;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,MAAI,GAAIC,MAAc,CAACC,yBAAvB;AACD,C,CAED;;;AACAC,cAAc,CAAC;AAAEC,MAAI,EAAE;AAAR,CAAD,CAAd;AAEA,OAAM,SAAUD,cAAV,CAAyBE,YAAzB,EAAmD;AACvD,MAAI,CAACL,IAAL,EAAW;AACT;AACD;;AACD,MAAIK,YAAY,CAACD,IAAb,KAAsB,MAA1B,EAAkC;AAChCJ,QAAI,CAACM,IAAL;AACD,GAFD,MAEO;AACL,QAAID,YAAY,CAACD,IAAb,KAAsB,iBAAtB,IAA2CC,YAAY,CAACD,IAAb,KAAsB,eAArE,EAAsF;AACpFC,kBAAY,CAACE,KAAb,GAAqBC,eAAe,CAACH,YAAY,CAACE,KAAd,CAApC;AACD;;AACDP,QAAI,CAACS,IAAL,CAAUJ,YAAV;AACD;AACF;;AAED,SAASG,eAAT,CAAyBD,KAAzB,EAAuC;AACrC,MAAIA,KAAK,YAAYG,KAArB,EAA4B;AAC1B,WAAOH,KAAK,CAACI,OAAb;AACD,GAFD,MAEO;AACL,WAAO,KAAKJ,KAAZ;AACD;AACF","names":["hook","window","__USEDAPP_DEVTOOLS_HOOK__","notifyDevtools","type","notification","init","error","getErrorMessage","send","Error","message"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/devtools.ts"],"sourcesContent":["import { ChainId } from '../constants'\nimport { RawCall, ChainState } from './chainState'\n\n// NOTE: If you modify this file please ensure consistency with\n// packages/extension/src/providers/events/Message.ts\n\ninterface Init {\n  type: 'INIT'\n}\n\ninterface NetworkChanged {\n  type: 'NETWORK_CHANGED'\n  chainId?: ChainId\n  multicallAddress?: string\n}\n\ninterface BlockNumberChanged {\n  type: 'BLOCK_NUMBER_CHANGED'\n  chainId: ChainId\n  blockNumber: number\n}\n\ninterface AccountChanged {\n  type: 'ACCOUNT_CHANGED'\n  address?: string\n}\n\ninterface CallsChanged {\n  type: 'CALLS_CHANGED'\n  chainId?: ChainId\n  calls: RawCall[]\n}\n\ninterface MulticallSuccess {\n  type: 'MULTICALL_SUCCESS'\n  multicallAddress: string\n  duration: number\n  chainId: ChainId\n  blockNumber: number\n  state: ChainState\n}\n\ninterface MulticallError {\n  type: 'MULTICALL_ERROR'\n  multicallAddress: string\n  duration: number\n  calls: RawCall[]\n  chainId: ChainId\n  blockNumber: number\n  error: any\n}\n\ninterface GenericError {\n  type: 'GENERIC_ERROR'\n  error: Error\n}\n\ntype Notification =\n  | Init\n  | NetworkChanged\n  | BlockNumberChanged\n  | AccountChanged\n  | CallsChanged\n  | MulticallSuccess\n  | MulticallError\n  | GenericError\n\nlet hook: any\nif (typeof window !== 'undefined') {\n  hook = (window as any).__USEDAPP_DEVTOOLS_HOOK__\n}\n\n// immediately notify devtools that the page is using it\nnotifyDevtools({ type: 'INIT' })\n\nexport function notifyDevtools(notification: Notification) {\n  if (!hook) {\n    return\n  }\n  if (notification.type === 'INIT') {\n    hook.init()\n  } else {\n    if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {\n      notification.error = getErrorMessage(notification.error)\n    }\n    hook.send(notification)\n  }\n}\n\nfunction getErrorMessage(error: unknown) {\n  if (error instanceof Error) {\n    return error.message\n  } else {\n    return '' + error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}