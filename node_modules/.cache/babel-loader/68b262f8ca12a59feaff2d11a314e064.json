{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { ethers } from \"ethers\";\nimport LuckySix from \"../dependencies/LuckySix.json\";\nimport contractsMap from \"../contractsMap.json\";\nexport const OnlyOwner = () => {\n  _s();\n\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const {\n    abi\n  } = LuckySix;\n\n  async function _getState() {\n    const signer = library.getSigner();\n    const contractAddress = contractsMap[42][\"LuckySix\"][0];\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n\n    try {\n      const x = Number(await contract.lottery_state());\n\n      switch (x) {\n        case 0:\n          {\n            console.log(\"OPEN\");\n          }\n\n        case 1:\n          console.log(\"CLOSED\");\n\n        case 2:\n          console.log(\"CALCULATING_WINNER\");\n      }\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  async function _getBalance() {\n    const signer = library.getSigner();\n    const contractAddress = contractsMap[42][\"LuckySix\"][0];\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n\n    try {\n      console.log(\"ETH balance: \" + (await contract.getETHBalance()) / 10 ** 18);\n      console.log(\"LINK balance: \" + (await contract.getLINKBalance()) / 10 ** 18);\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  return {\n    _getState,\n    _getBalance\n  };\n};\n\n_s(OnlyOwner, \"xaHdvOy2NynB4JuHyye5AaIXVbE=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = OnlyOwner;\nexport default OnlyOwner;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnlyOwner\");","map":{"version":3,"sources":["/home/vukasin/Desktop/LuckySixFront/src/hooks/hookAdmin.tsx"],"names":["useWeb3React","ethers","LuckySix","contractsMap","OnlyOwner","account","library","abi","_getState","signer","getSigner","contractAddress","contract","Contract","x","Number","lottery_state","console","log","ex","_getBalance","getETHBalance","getLINKBalance"],"mappings":";;AAAA,SAAQA,YAAR,QAA2B,kBAA3B;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAE3B,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBN,YAAY,EAAvC;AAEA,QAAM;AAACO,IAAAA;AAAD,MAAQL,QAAd;;AAGA,iBAAeM,SAAf,GAA0B;AACtB,UAAMC,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,UAAMC,eAAe,GAAGR,YAAY,CAAC,EAAD,CAAZ,CAAiB,UAAjB,EAA6B,CAA7B,CAAxB;AACA,UAAMS,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAX,CAAoBF,eAApB,EAAqCJ,GAArC,EAA0CE,MAA1C,CAAjB;;AACA,QAAG;AACC,YAAMK,CAAC,GAAGC,MAAM,CAAC,MAAMH,QAAQ,CAACI,aAAT,EAAP,CAAhB;;AACA,cAAOF,CAAP;AACI,aAAK,CAAL;AAAQ;AACJG,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;;AACD,aAAK,CAAL;AACID,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACJ,aAAK,CAAL;AACID,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAPR;AASH,KAXD,CAWC,OAAMC,EAAN,EAAS;AACNF,MAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AACH;AACJ;;AAGD,iBAAeC,WAAf,GAA4B;AACxB,UAAMX,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,UAAMC,eAAe,GAAGR,YAAY,CAAC,EAAD,CAAZ,CAAiB,UAAjB,EAA6B,CAA7B,CAAxB;AACA,UAAMS,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAX,CAAoBF,eAApB,EAAqCJ,GAArC,EAA0CE,MAA1C,CAAjB;;AAEA,QAAG;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,OAAMN,QAAQ,CAACS,aAAT,EAAN,IAAiC,MAAM,EAArE;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB,OAAMN,QAAQ,CAACU,cAAT,EAAN,IAAkC,MAAM,EAAvE;AACH,KAHD,CAGC,OAAMH,EAAN,EAAS;AACNF,MAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AACH;AACJ;;AAED,SAAO;AAACX,IAAAA,SAAD;AAAYY,IAAAA;AAAZ,GAAP;AACH,CA1CM;;GAAMhB,S;UAEkBJ,Y;;;KAFlBI,S;AA4Cb,eAAeA,SAAf","sourcesContent":["import {useWeb3React} from \"@web3-react/core\"\nimport {ethers} from \"ethers\"\nimport LuckySix from \"../dependencies/LuckySix.json\"\nimport contractsMap from \"../contractsMap.json\"\n\n\nexport const OnlyOwner = () => {\n\n    const {account, library} = useWeb3React()\n\n    const {abi} = LuckySix\n\n\n    async function _getState(){\n        const signer = library.getSigner()\n        const contractAddress = contractsMap[42][\"LuckySix\"][0]\n        const contract = new ethers.Contract(contractAddress, abi, signer)\n        try{\n            const x = Number(await contract.lottery_state())\n            switch(x){\n                case 0: {\n                    console.log(\"OPEN\")\n                }\n                case 1:\n                    console.log(\"CLOSED\")\n                case 2:\n                    console.log(\"CALCULATING_WINNER\")\n            }\n        }catch(ex){\n            console.log(ex)\n        }\n    }\n   \n\n    async function _getBalance(){\n        const signer = library.getSigner()\n        const contractAddress = contractsMap[42][\"LuckySix\"][0]\n        const contract = new ethers.Contract(contractAddress, abi, signer)\n\n        try{\n            console.log(\"ETH balance: \" + await contract.getETHBalance() / 10 ** 18)\n            console.log(\"LINK balance: \" + await contract.getLINKBalance() / 10 ** 18)\n        }catch(ex){\n            console.log(ex)\n        }\n    }\n\n    return {_getState, _getBalance}\n}\n\nexport default OnlyOwner"]},"metadata":{},"sourceType":"module"}