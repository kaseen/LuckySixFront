{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n  const {\n    chainId: providerChainId\n  } = useEthers();\n  const [tokenList, setTokenList] = useState();\n  const chainId = overrideChainId || providerChainId;\n  useEffect(() => {\n    fetch(tokenListURI).then(async response => {\n      if (response.ok) {\n        const {\n          name,\n          logoURI,\n          tokens\n        } = await response.json();\n        setTokenList({\n          name,\n          logoURI,\n          tokens: tokens.filter(token => {\n            const sameChainId = token.chainId === chainId;\n\n            if (!tags) {\n              return sameChainId;\n            }\n\n            return sameChainId && token.tags && token.tags.some(tag => tags.includes(tag));\n          })\n        });\n      } else {\n        const errorMessage = await response.text();\n        return Promise.reject(new Error(errorMessage));\n      }\n    }).catch(err => {\n      console.log(err);\n      setTokenList(undefined);\n    });\n  }, [tokenListURI, chainId]);\n  return tokenList;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,SAASC,SAAT,QAA0B,aAA1B;AAQA,OAAM,SAAUC,YAAV,CAAuBC,YAAvB,EAA6CC,eAA7C,EAAwEC,IAAxE,EAAuF;AAC3F,QAAM;AAAEC,WAAO,EAAEC;AAAX,MAA+BN,SAAS,EAA9C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,EAA1C;AAEA,QAAMM,OAAO,GAAGF,eAAe,IAAIG,eAAnC;AAEAR,WAAS,CAAC,MAAK;AACbW,SAAK,CAACP,YAAD,CAAL,CACGQ,IADH,CACQ,MAAOC,QAAP,IAAmB;AACvB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,cAAM;AAAEC,cAAF;AAAQC,iBAAR;AAAiBC;AAAjB,YAA4B,MAAMJ,QAAQ,CAACK,IAAT,EAAxC;AACAR,oBAAY,CAAC;AACXK,cADW;AAEXC,iBAFW;AAGXC,gBAAM,EAAGA,MAAsB,CAACE,MAAvB,CAA+BC,KAAD,IAAU;AAC/C,kBAAMC,WAAW,GAAGD,KAAK,CAACb,OAAN,KAAkBA,OAAtC;;AACA,gBAAI,CAACD,IAAL,EAAW;AACT,qBAAOe,WAAP;AACD;;AACD,mBAAOA,WAAW,IAAID,KAAK,CAACd,IAArB,IAA6Bc,KAAK,CAACd,IAAN,CAAWgB,IAAX,CAAiBC,GAAD,IAASjB,IAAI,CAACkB,QAAL,CAAcD,GAAd,CAAzB,CAApC;AACD,WANQ;AAHE,SAAD,CAAZ;AAWD,OAbD,MAaO;AACL,cAAME,YAAY,GAAG,MAAMZ,QAAQ,CAACa,IAAT,EAA3B;AACA,eAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUJ,YAAV,CAAf,CAAP;AACD;AACF,KAnBH,EAoBGK,KApBH,CAoBUC,GAAD,IAAQ;AACbC,aAAO,CAACC,GAAR,CAAYF,GAAZ;AACArB,kBAAY,CAACwB,SAAD,CAAZ;AACD,KAvBH;AAwBD,GAzBQ,EAyBN,CAAC9B,YAAD,EAAeG,OAAf,CAzBM,CAAT;AA2BA,SAAOE,SAAP;AACD","names":["useEffect","useState","useEthers","useTokenList","tokenListURI","overrideChainId","tags","chainId","providerChainId","tokenList","setTokenList","fetch","then","response","ok","name","logoURI","tokens","json","filter","token","sameChainId","some","tag","includes","errorMessage","text","Promise","reject","Error","catch","err","console","log","undefined"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/hooks/useTokenList.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { ChainId } from '../constants'\nimport { useEthers } from './useEthers'\n\ninterface TokenList {\n  name: string\n  logoURI: string\n  tokens: TokenInfo[]\n}\n\nexport function useTokenList(tokenListURI: string, overrideChainId?: ChainId, tags?: string[]) {\n  const { chainId: providerChainId } = useEthers()\n  const [tokenList, setTokenList] = useState<TokenList>()\n\n  const chainId = overrideChainId || providerChainId\n\n  useEffect(() => {\n    fetch(tokenListURI)\n      .then(async (response) => {\n        if (response.ok) {\n          const { name, logoURI, tokens } = await response.json()\n          setTokenList({\n            name,\n            logoURI,\n            tokens: (tokens as TokenInfo[]).filter((token) => {\n              const sameChainId = token.chainId === chainId\n              if (!tags) {\n                return sameChainId\n              }\n              return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag))\n            }),\n          })\n        } else {\n          const errorMessage = await response.text()\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setTokenList(undefined)\n      })\n  }, [tokenListURI, chainId])\n\n  return tokenList\n}\n"]},"metadata":{},"sourceType":"module"}