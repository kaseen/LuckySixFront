{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { getChainById } from '../helpers';\nimport { useEthers } from '../hooks';\nimport { useBlockNumber } from './blockNumber';\nimport { useConfig, useUpdateConfig } from './config';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\n\nexport function LocalMulticallProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const updateConfig = useUpdateConfig();\n  const {\n    multicallAddresses\n  } = useConfig();\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n  const blockNumber = useBlockNumber();\n  useEffect(() => {\n    var _a;\n\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const signer = library.getSigner();\n\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error);\n        return;\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying);\n\n      const deployMulticall = async () => {\n        try {\n          const {\n            contractAddress,\n            blockNumber\n          } = await deployContract(multicallABI, signer);\n          updateConfig({\n            multicallAddresses: {\n              [chainId]: contractAddress\n            }\n          });\n          setMulticallBlockNumber(blockNumber);\n          setLocalMulticallState(LocalMulticallState.Deployed);\n        } catch (_a) {\n          setLocalMulticallState(LocalMulticallState.Error);\n        }\n      };\n\n      deployMulticall();\n    }\n  }, [library, chainId]);\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    }, void 0);\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    }, void 0);\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    }, void 0);\n  }\n}","map":{"version":3,"mappings":"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","names":["useEffect","useState","getChainById","useEthers","useBlockNumber","useConfig","useUpdateConfig","multicallABI","deployContract","LocalMulticallState","LocalMulticallProvider","children","updateConfig","multicallAddresses","library","chainId","localMulticallState","setLocalMulticallState","Unknown","multicallBlockNumber","setMulticallBlockNumber","blockNumber","_a","isLocalChain","NonLocal","Deployed","Deploying","signer","getSigner","Error","deployMulticall","contractAddress","awaitingMulticallBlock","_jsx"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/LocalMulticallProvider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useState } from 'react'\nimport { getChainById } from '../helpers'\nimport { useEthers } from '../hooks'\nimport { useBlockNumber } from './blockNumber'\nimport { useConfig, useUpdateConfig } from './config'\nimport multicallABI from '../constants/abi/MultiCall.json'\nimport { deployContract } from '../helpers/contract'\n\ninterface LocalMulticallProps {\n  children: ReactNode\n}\n\nenum LocalMulticallState {\n  Unknown,\n  NonLocal,\n  Deploying,\n  Deployed,\n  Error,\n}\n\nexport function LocalMulticallProvider({ children }: LocalMulticallProps) {\n  const updateConfig = useUpdateConfig()\n  const { multicallAddresses } = useConfig()\n  const { library, chainId } = useEthers()\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown)\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState<number>()\n  const blockNumber = useBlockNumber()\n\n  useEffect(() => {\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown)\n    } else if (!getChainById(chainId)?.isLocalChain) {\n      setLocalMulticallState(LocalMulticallState.NonLocal)\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed)\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const signer = library.getSigner()\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error)\n        return\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying)\n\n      const deployMulticall = async () => {\n        try {\n          const { contractAddress, blockNumber } = await deployContract(multicallABI, signer)\n          updateConfig({ multicallAddresses: { [chainId]: contractAddress } })\n          setMulticallBlockNumber(blockNumber)\n          setLocalMulticallState(LocalMulticallState.Deployed)\n        } catch {\n          setLocalMulticallState(LocalMulticallState.Error)\n        }\n      }\n      deployMulticall()\n    }\n  }, [library, chainId])\n\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber\n\n  if (\n    localMulticallState === LocalMulticallState.Deploying ||\n    (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)\n  ) {\n    return <div>Deploying multicall...</div>\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return <div>Error deploying multicall contract</div>\n  } else {\n    return <>{children}</>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}