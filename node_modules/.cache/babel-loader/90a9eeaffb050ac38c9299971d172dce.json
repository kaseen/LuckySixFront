{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { ethers } from \"ethers\";\nimport { useState } from \"react\";\nimport LuckySix from \"../dependencies/LuckySix.json\";\nimport contractsMap from \"../contractsMap.json\";\nexport const OnlyOwner = () => {\n  _s();\n\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const {\n    abi\n  } = LuckySix;\n\n  async function _getState() {\n    const signer = library.getSigner();\n    const contractAddress = contractsMap[42][\"LuckySix\"][0];\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n    console.log(\"1\");\n\n    try {\n      const x = await contract.lottery_state();\n      console.log(x);\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  const [state, getState] = useState(kur());\n\n  function kur() {\n    _getState();\n  }\n\n  async function _getBalance() {\n    const signer = library.getSigner();\n    const contractAddress = contractsMap[42][\"LuckySix\"][0];\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n\n    try {\n      console.log(\"ETH balance: \" + (await contract.getETHBalance()) / 10 ** 18);\n      console.log(\"LINK balance: \" + (await contract.getLINKBalance()) / 10 ** 18);\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  return {\n    state,\n    _getBalance\n  };\n};\n\n_s(OnlyOwner, \"RN4qw0LR9OB0SjmSoMZKAnTjZK4=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = OnlyOwner;\nexport default OnlyOwner;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnlyOwner\");","map":{"version":3,"sources":["/home/vukasin/Desktop/LuckySixFront/src/hooks/hookAdmin.tsx"],"names":["useWeb3React","ethers","useState","LuckySix","contractsMap","OnlyOwner","account","library","abi","_getState","signer","getSigner","contractAddress","contract","Contract","console","log","x","lottery_state","ex","state","getState","kur","_getBalance","getETHBalance","getLINKBalance"],"mappings":";;AAAA,SAAQA,YAAR,QAA2B,kBAA3B;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAE3B,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBP,YAAY,EAAvC;AAEA,QAAM;AAACQ,IAAAA;AAAD,MAAQL,QAAd;;AAIA,iBAAeM,SAAf,GAA0B;AACtB,UAAMC,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,UAAMC,eAAe,GAAGR,YAAY,CAAC,EAAD,CAAZ,CAAiB,UAAjB,EAA6B,CAA7B,CAAxB;AACA,UAAMS,QAAQ,GAAG,IAAIZ,MAAM,CAACa,QAAX,CAAoBF,eAApB,EAAqCJ,GAArC,EAA0CE,MAA1C,CAAjB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,QAAG;AACC,YAAMC,CAAC,GAAG,MAAMJ,QAAQ,CAACK,aAAT,EAAhB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACH,KAHD,CAGC,OAAME,EAAN,EAAS;AACNJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ;AACH;AACJ;;AAED,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAACoB,GAAG,EAAJ,CAAlC;;AAEA,WAASA,GAAT,GAAc;AACVb,IAAAA,SAAS;AACZ;;AAID,iBAAec,WAAf,GAA4B;AACxB,UAAMb,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,UAAMC,eAAe,GAAGR,YAAY,CAAC,EAAD,CAAZ,CAAiB,UAAjB,EAA6B,CAA7B,CAAxB;AACA,UAAMS,QAAQ,GAAG,IAAIZ,MAAM,CAACa,QAAX,CAAoBF,eAApB,EAAqCJ,GAArC,EAA0CE,MAA1C,CAAjB;;AAEA,QAAG;AACCK,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,OAAMH,QAAQ,CAACW,aAAT,EAAN,IAAiC,MAAM,EAArE;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB,OAAMH,QAAQ,CAACY,cAAT,EAAN,IAAkC,MAAM,EAAvE;AACH,KAHD,CAGC,OAAMN,EAAN,EAAS;AACNJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ;AACH;AACJ;;AAED,SAAO;AAACC,IAAAA,KAAD;AAAQG,IAAAA;AAAR,GAAP;AACH,CA3CM;;GAAMlB,S;UAEkBL,Y;;;KAFlBK,S;AA6Cb,eAAeA,SAAf","sourcesContent":["import {useWeb3React} from \"@web3-react/core\"\nimport {ethers} from \"ethers\"\nimport {useState} from \"react\"\nimport LuckySix from \"../dependencies/LuckySix.json\"\nimport contractsMap from \"../contractsMap.json\"\n\n\nexport const OnlyOwner = () => {\n\n    const {account, library} = useWeb3React()\n\n    const {abi} = LuckySix\n\n    \n\n    async function _getState(){\n        const signer = library.getSigner()\n        const contractAddress = contractsMap[42][\"LuckySix\"][0]\n        const contract = new ethers.Contract(contractAddress, abi, signer)\n        console.log(\"1\")\n        try{\n            const x = await contract.lottery_state()\n            console.log(x)\n        }catch(ex){\n            console.log(ex)\n        }\n    }\n\n    const [state, getState] = useState(kur())\n\n    function kur(){\n        _getState()\n    }\n\n   \n\n    async function _getBalance(){\n        const signer = library.getSigner()\n        const contractAddress = contractsMap[42][\"LuckySix\"][0]\n        const contract = new ethers.Contract(contractAddress, abi, signer)\n\n        try{\n            console.log(\"ETH balance: \" + await contract.getETHBalance() / 10 ** 18)\n            console.log(\"LINK balance: \" + await contract.getLINKBalance() / 10 ** 18)\n        }catch(ex){\n            console.log(ex)\n        }\n    }\n\n    return {state, _getBalance}\n}\n\nexport default OnlyOwner"]},"metadata":{},"sourceType":"module"}