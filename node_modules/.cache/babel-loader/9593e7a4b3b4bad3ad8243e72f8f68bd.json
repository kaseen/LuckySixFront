{"ast":null,"code":"import { ChainId } from '../../constants';\n\nfunction isChainId(chainId) {\n  return Object.values(ChainId).includes(chainId);\n}\n\nexport function transactionReducer(state, action) {\n  var _a;\n\n  switch (action.type) {\n    case 'ADD_TRANSACTION':\n      {\n        const {\n          chainId\n        } = action.payload.transaction;\n\n        if (isChainId(chainId)) {\n          return Object.assign(Object.assign({}, state), {\n            [chainId]: [action.payload, ...((_a = state[chainId]) !== null && _a !== void 0 ? _a : [])]\n          });\n        } else {\n          throw TypeError('Unsupported chain');\n        }\n      }\n\n    case 'UPDATE_TRANSACTIONS':\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: [...action.transactions]\n      });\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;;AAgBA,SAASC,SAAT,CAAmBC,OAAnB,EAAkC;AAChC,SAAOC,MAAM,CAACC,MAAP,CAAcJ,OAAd,EAAuBK,QAAvB,CAAgCH,OAAhC,CAAP;AACD;;AAED,OAAM,SAAUI,kBAAV,CAA6BC,KAA7B,EAAwDC,MAAxD,EAAsE;;;AAC1E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AAAwB;AACtB,cAAM;AAAEP;AAAF,YAAcM,MAAM,CAACE,OAAP,CAAeC,WAAnC;;AAEA,YAAIV,SAAS,CAACC,OAAD,CAAb,EAAwB;AACtB,iDACKK,KADL,GACU;AACR,aAACL,OAAD,GAAW,CAACM,MAAM,CAACE,OAAR,EAAiB,IAAG,MAACH,KAAK,CAACL,OAAD,CAAN,MAAe,IAAf,IAAeU,aAAf,GAAeA,EAAf,GAAmB,EAAtB,CAAjB;AADH,WADV;AAID,SALD,MAKO;AACL,gBAAMC,SAAS,CAAC,mBAAD,CAAf;AACD;AACF;;AACD,SAAK,qBAAL;AACE,6CAAYN,KAAZ,GAAiB;AAAE,SAACC,MAAM,CAACN,OAAR,GAAkB,CAAC,GAAGM,MAAM,CAACM,YAAX;AAApB,OAAjB;AAdJ;AAgBD","names":["ChainId","isChainId","chainId","Object","values","includes","transactionReducer","state","action","type","payload","transaction","_a","TypeError","transactions"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/transactions/reducer.ts"],"sourcesContent":["import { ChainId } from '../../constants'\n\nimport { StoredTransaction, StoredTransactions } from './model'\n\ntype Action = AddTransaction | UpdateTransactions\n\ninterface AddTransaction {\n  type: 'ADD_TRANSACTION'\n  payload: StoredTransaction\n}\ninterface UpdateTransactions {\n  type: 'UPDATE_TRANSACTIONS'\n  chainId: ChainId\n  transactions: StoredTransaction[]\n}\n\nfunction isChainId(chainId: number): chainId is ChainId {\n  return Object.values(ChainId).includes(chainId)\n}\n\nexport function transactionReducer(state: StoredTransactions, action: Action): StoredTransactions {\n  switch (action.type) {\n    case 'ADD_TRANSACTION': {\n      const { chainId } = action.payload.transaction\n\n      if (isChainId(chainId)) {\n        return {\n          ...state,\n          [chainId]: [action.payload, ...(state[chainId] ?? [])],\n        }\n      } else {\n        throw TypeError('Unsupported chain')\n      }\n    }\n    case 'UPDATE_TRANSACTIONS':\n      return { ...state, [action.chainId]: [...action.transactions] }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}