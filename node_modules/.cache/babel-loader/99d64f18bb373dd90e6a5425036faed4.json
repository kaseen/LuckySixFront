{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); // Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\nlet anyGlobal = null;\n\ntry {\n  anyGlobal = window;\n\n  if (anyGlobal == null) {\n    throw new Error(\"try next\");\n  }\n} catch (error) {\n  try {\n    anyGlobal = global;\n\n    if (anyGlobal == null) {\n      throw new Error(\"try next\");\n    }\n  } catch (error) {\n    anyGlobal = {};\n  }\n}\n\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\n\nexport function randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1 || length != length) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return arrayify(result);\n}\n;","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,QAAT,QAAyB,sBAAzB;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf,C,CAEA;AACA;;AAEA,IAAIE,SAAS,GAAQ,IAArB;;AACA,IAAI;AACAA,WAAS,GAAIC,MAAb;;AACA,MAAID,SAAS,IAAI,IAAjB,EAAuB;AAAE,UAAM,IAAIE,KAAJ,CAAU,UAAV,CAAN;AAA8B;AAC1D,CAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,MAAI;AACAH,aAAS,GAAII,MAAb;;AACA,QAAIJ,SAAS,IAAI,IAAjB,EAAuB;AAAE,YAAM,IAAIE,KAAJ,CAAU,UAAV,CAAN;AAA8B;AAC1D,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZH,aAAS,GAAG,EAAZ;AACH;AACJ;;AAED,IAAIK,MAAM,GAAQL,SAAS,CAACK,MAAV,IAAoBL,SAAS,CAACM,QAAhD;;AACA,IAAI,CAACD,MAAD,IAAW,CAACA,MAAM,CAACE,eAAvB,EAAwC;AAEpCR,QAAM,CAACS,IAAP,CAAY,8CAAZ;AAEAH,QAAM,GAAG;AACLE,mBAAe,EAAE,UAASE,MAAT,EAA2B;AACxC,aAAOV,MAAM,CAACW,UAAP,CAAkB,mCAAlB,EAAuDb,MAAM,CAACc,MAAP,CAAcC,qBAArE,EAA4F;AAC/FC,iBAAS,EAAE;AADoF,OAA5F,CAAP;AAGH;AALI,GAAT;AAOH;;AAED,OAAM,SAAUC,WAAV,CAAsBC,MAAtB,EAAoC;AACtC,MAAIA,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAG,IAAxB,IAAiCA,MAAM,GAAG,CAA1C,IAAgDA,MAAM,IAAIA,MAA9D,EAAsE;AAClEhB,UAAM,CAACiB,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsDD,MAAtD;AACH;;AAED,QAAME,MAAM,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAf;AACAV,QAAM,CAACE,eAAP,CAAuBU,MAAvB;AACA,SAAOrB,QAAQ,CAACqB,MAAD,CAAf;AACH;AAAA","names":["arrayify","Logger","version","logger","anyGlobal","window","Error","error","global","crypto","msCrypto","getRandomValues","warn","buffer","throwError","errors","UNSUPPORTED_OPERATION","operation","randomBytes","length","throwArgumentError","result","Uint8Array"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/ethers/node_modules/@ethersproject/random/src.ts/browser-random.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\nlet anyGlobal: any = null;\ntry {\n    anyGlobal = (window as any);\n    if (anyGlobal == null) { throw new Error(\"try next\"); }\n} catch (error) {\n    try {\n        anyGlobal = (global as any);\n        if (anyGlobal == null) { throw new Error(\"try next\"); }\n    } catch (error) {\n        anyGlobal = { };\n    }\n}\n\nlet crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n\n    logger.warn(\"WARNING: Missing strong random number source\");\n\n    crypto = {\n        getRandomValues: function(buffer: Uint8Array): Uint8Array {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n};\n"]},"metadata":{},"sourceType":"module"}