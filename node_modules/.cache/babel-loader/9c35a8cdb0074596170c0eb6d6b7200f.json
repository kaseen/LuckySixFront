{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber';\nimport { ChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { NotificationsProvider } from './notifications/provider';\nimport { NetworkActivator } from './NetworkActivator';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider } from './network';\nimport { InjectedNetworkProvider } from './injectedNetwork';\nexport function DAppProvider(_ref) {\n  let {\n    config,\n    children\n  } = _ref;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    }, void 0)\n  }), void 0);\n}\n\nconst getMulticallAddresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => result[network.chainId] = network.multicallAddress);\n  return result;\n};\n\nconst getMulticall2Addresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const {\n    multicallAddresses,\n    networks,\n    multicallVersion\n  } = useConfig();\n  const defaultAddresses = useMemo(() => multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks), [networks, multicallVersion]);\n  const multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(NetworkProvider, {\n    children: _jsx(InjectedNetworkProvider, {\n      children: _jsxs(BlockNumberProvider, {\n        children: [_jsx(NetworkActivator, {}, void 0), _jsx(LocalMulticallProvider, {\n          children: _jsx(ChainStateProvider, Object.assign({\n            multicallAddresses: multicallAddressesMerged\n          }, {\n            children: _jsx(NotificationsProvider, {\n              children: _jsx(TransactionProvider, {\n                children: children\n              }, void 0)\n            }, void 0)\n          }), void 0)\n        }, void 0)]\n      }, void 0)\n    }, void 0)\n  }, void 0);\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,OAApB,QAAmC,OAAnC;AAEA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,kBAAT,QAAmC,cAAnC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,uBAAT,QAAwC,mBAAxC;AAOA,OAAM,SAAUC,YAAV,OAA8D;AAAA,MAAvC;AAAEC,UAAF;AAAUC;AAAV,GAAuC;AAClE,SACEC,KAACb,cAAD,EAAec;AAACH,UAAM,EAAEA;AAAT,KAAe;AAAAC,cAC5BC,KAACE,sBAAD,EAAuB;AAAAH,gBAAEA;AAAF,KAAvB,EAAiC,MAAjC;AAD4B,GAAf,CAAf,EAC6D,MAD7D,CADF;AAKD;;AAMD,MAAMI,qBAAqB,GAAIC,QAAD,IAAkC;AAC9D,QAAMC,MAAM,GAAgC,EAA5C;AACAD,UAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAmBC,OAAD,IAAcF,MAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACE,gBAAlE;AACA,SAAOJ,MAAP;AACD,CAJD;;AAMA,MAAMK,sBAAsB,GAAIN,QAAD,IAAkC;AAC/D,QAAMC,MAAM,GAAgC,EAA5C;AACAD,UAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAmBC,OAAD,IAAY;AAC5B,QAAIA,OAAO,CAACI,iBAAZ,EAA+B;AAC7BN,YAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACI,iBAAlC;AACD;AACF,GAJD;AAKA,SAAON,MAAP;AACD,CARD;;AAUA,SAASH,sBAAT,QAA6D;AAAA,MAA7B;AAAEH;AAAF,GAA6B;AAC3D,QAAM;AAAEa,sBAAF;AAAsBR,YAAtB;AAAgCS;AAAhC,MAAqDvB,SAAS,EAApE;AACA,QAAMwB,gBAAgB,GAAG5B,OAAO,CAC9B,MAAO2B,gBAAgB,KAAK,CAArB,GAAyBV,qBAAqB,CAACC,QAAD,CAA9C,GAA2DM,sBAAsB,CAACN,QAAD,CAD1D,EAE9B,CAACA,QAAD,EAAWS,gBAAX,CAF8B,CAAhC;AAIA,QAAME,wBAAwB,mCAAQD,gBAAR,GAA6BF,kBAA7B,CAA9B;AAEA,SACEZ,KAACL,eAAD,EAAgB;AAAAI,cACdC,KAACJ,uBAAD,EAAwB;AAAAG,gBACtBiB,MAAC5B,mBAAD,EAAoB;AAAAW,mBAClBC,KAACR,gBAAD,EAAiB,EAAjB,EAAiB,MAAjB,CADkB,EAElBQ,KAACN,sBAAD,EAAuB;AAAAK,oBACrBC,KAACX,kBAAD,EAAmBY;AAACW,8BAAkB,EAAEG;AAArB,aAA6C;AAAAhB,sBAC9DC,KAACT,qBAAD,EAAsB;AAAAQ,wBACpBC,KAACP,mBAAD,EAAoB;AAAAM,0BAAEA;AAAF,eAApB,EAA8B,MAA9B;AADoB,aAAtB,EACuD,MADvD;AAD8D,WAA7C,CAAnB,EAG0B,MAH1B;AADqB,SAAvB,EAKuB,MALvB,CAFkB;AAAA,OAApB,EAQ2B,MAR3B;AADsB,KAAxB,EAUwB,MAVxB;AADc,GAAhB,EAY4B,MAZ5B,CADF;AAgBD","names":["useMemo","ConfigProvider","BlockNumberProvider","ChainStateProvider","useConfig","NotificationsProvider","NetworkActivator","TransactionProvider","LocalMulticallProvider","NetworkProvider","InjectedNetworkProvider","DAppProvider","config","children","_jsx","Object","DAppProviderWithConfig","getMulticallAddresses","networks","result","forEach","network","chainId","multicallAddress","getMulticall2Addresses","multicall2Address","multicallAddresses","multicallVersion","defaultAddresses","multicallAddressesMerged","_jsxs"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/DAppProvider.tsx"],"sourcesContent":["import { ReactNode, useMemo } from 'react'\nimport { Config, Chain } from '../constants'\nimport { ConfigProvider } from './config'\nimport { BlockNumberProvider } from './blockNumber'\nimport { ChainStateProvider } from './chainState'\nimport { useConfig } from './config/context'\nimport { NotificationsProvider } from './notifications/provider'\nimport { NetworkActivator } from './NetworkActivator'\nimport { TransactionProvider } from './transactions/provider'\nimport { LocalMulticallProvider } from './LocalMulticallProvider'\nimport { NetworkProvider } from './network'\nimport { InjectedNetworkProvider } from './injectedNetwork'\n\ninterface DAppProviderProps {\n  children: ReactNode\n  config: Config\n}\n\nexport function DAppProvider({ config, children }: DAppProviderProps) {\n  return (\n    <ConfigProvider config={config}>\n      <DAppProviderWithConfig>{children}</DAppProviderWithConfig>\n    </ConfigProvider>\n  )\n}\n\ninterface WithConfigProps {\n  children: ReactNode\n}\n\nconst getMulticallAddresses = (networks: Chain[] | undefined) => {\n  const result: { [index: number]: string } = {}\n  networks?.forEach((network) => (result[network.chainId] = network.multicallAddress))\n  return result\n}\n\nconst getMulticall2Addresses = (networks: Chain[] | undefined) => {\n  const result: { [index: number]: string } = {}\n  networks?.forEach((network) => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address\n    }\n  })\n  return result\n}\n\nfunction DAppProviderWithConfig({ children }: WithConfigProps) {\n  const { multicallAddresses, networks, multicallVersion } = useConfig()\n  const defaultAddresses = useMemo(\n    () => (multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks)),\n    [networks, multicallVersion]\n  )\n  const multicallAddressesMerged = { ...defaultAddresses, ...multicallAddresses }\n\n  return (\n    <NetworkProvider>\n      <InjectedNetworkProvider>\n        <BlockNumberProvider>\n          <NetworkActivator />\n          <LocalMulticallProvider>\n            <ChainStateProvider multicallAddresses={multicallAddressesMerged}>\n              <NotificationsProvider>\n                <TransactionProvider>{children}</TransactionProvider>\n              </NotificationsProvider>\n            </ChainStateProvider>\n          </LocalMulticallProvider>\n        </BlockNumberProvider>\n      </InjectedNetworkProvider>\n    </NetworkProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}