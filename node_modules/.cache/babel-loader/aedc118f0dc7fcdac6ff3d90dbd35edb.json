{"ast":null,"code":"export const DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: ''\n};\nconst INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.');\n  }\n\n  const number = formatNumber(options, value);\n  return [options.prefix, number, options.suffix].join('');\n}\n\nfunction formatNumber(options, value) {\n  const integer = getIntegerPart(value, options.decimals);\n  const thousands = splitThousands(integer, options.thousandSeparator);\n  const decimal = getDecimalPart(value, options.decimals);\n  const digits = options.useFixedPrecision ? toFixed(decimal, options.fixedPrecisionDigits) : toSignificant(decimal, integer.length, options.significantDigits);\n  return joinDecimals(thousands, digits, options.decimalSeparator);\n}\n\nfunction getIntegerPart(value, decimals) {\n  if (value.length <= decimals) {\n    return '0';\n  } else {\n    const fragment = value.substring(0, value.length - decimals);\n    return stripFrontZeroes(fragment);\n  }\n}\n\nfunction stripFrontZeroes(value) {\n  const stripped = value.replace(/^0+/, '');\n  return stripped || '0';\n}\n\nfunction splitThousands(value, separator) {\n  const count = value.length / 3;\n  const resultValue = value.split('');\n\n  for (let i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator);\n  }\n\n  return resultValue.join('');\n}\n\nfunction getDecimalPart(value, decimals) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0');\n  } else {\n    return value.substring(value.length - decimals);\n  }\n}\n\nfunction joinDecimals(integer, decimals, separator) {\n  if (!decimals) {\n    return integer;\n  } else {\n    return `${integer}${separator}${decimals}`;\n  }\n}\n\nfunction toSignificant(decimal, integerLength, significantDigits) {\n  const length = significantDigits - integerLength;\n\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal);\n  } else {\n    return stripEndZeroes(decimal.substring(0, length));\n  }\n}\n\nfunction stripEndZeroes(value) {\n  return value.replace(/0+$/, '');\n}\n\nfunction toFixed(decimal, fixedPrecisionDigits) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0');\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits);\n  }\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","decimals","thousandSeparator","decimalSeparator","significantDigits","Infinity","useFixedPrecision","fixedPrecisionDigits","prefix","suffix","INPUT_REGEX","formatCurrency","options","value","test","TypeError","number","formatNumber","join","integer","getIntegerPart","thousands","splitThousands","decimal","getDecimalPart","digits","toFixed","toSignificant","length","joinDecimals","fragment","substring","stripFrontZeroes","stripped","replace","separator","count","resultValue","split","i","splice","padStart","integerLength","stripEndZeroes","padEnd"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/model/formatting.ts"],"sourcesContent":["export const DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: '',\n}\n\nexport type CurrencyFormatOptions = typeof DEFAULT_OPTIONS\n\nconst INPUT_REGEX = /^\\d*$/\n\nexport function formatCurrency(options: CurrencyFormatOptions, value: string): string {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.')\n  }\n  const number = formatNumber(options, value)\n  return [options.prefix, number, options.suffix].join('')\n}\n\nfunction formatNumber(options: CurrencyFormatOptions, value: string) {\n  const integer = getIntegerPart(value, options.decimals)\n  const thousands = splitThousands(integer, options.thousandSeparator)\n  const decimal = getDecimalPart(value, options.decimals)\n  const digits = options.useFixedPrecision\n    ? toFixed(decimal, options.fixedPrecisionDigits)\n    : toSignificant(decimal, integer.length, options.significantDigits)\n  return joinDecimals(thousands, digits, options.decimalSeparator)\n}\n\nfunction getIntegerPart(value: string, decimals: number) {\n  if (value.length <= decimals) {\n    return '0'\n  } else {\n    const fragment = value.substring(0, value.length - decimals)\n    return stripFrontZeroes(fragment)\n  }\n}\n\nfunction stripFrontZeroes(value: string) {\n  const stripped = value.replace(/^0+/, '')\n  return stripped || '0'\n}\n\nfunction splitThousands(value: string, separator: string) {\n  const count = value.length / 3\n  const resultValue = value.split('')\n  for (let i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator)\n  }\n  return resultValue.join('')\n}\n\nfunction getDecimalPart(value: string, decimals: number) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0')\n  } else {\n    return value.substring(value.length - decimals)\n  }\n}\n\nfunction joinDecimals(integer: string, decimals: string, separator: string) {\n  if (!decimals) {\n    return integer\n  } else {\n    return `${integer}${separator}${decimals}`\n  }\n}\n\nfunction toSignificant(decimal: string, integerLength: number, significantDigits: number) {\n  const length = significantDigits - integerLength\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal)\n  } else {\n    return stripEndZeroes(decimal.substring(0, length))\n  }\n}\n\nfunction stripEndZeroes(value: string) {\n  return value.replace(/0+$/, '')\n}\n\nfunction toFixed(decimal: string, fixedPrecisionDigits: number) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0')\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}