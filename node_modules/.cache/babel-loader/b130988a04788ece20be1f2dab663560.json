{"ast":null,"code":"import { addressEqual } from '../..';\nexport function callsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls];\n  } else {\n    let finalState = state;\n\n    for (const call of action.calls) {\n      const index = finalState.findIndex(x => addressEqual(x.address, call.address) && x.data === call.data);\n\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index);\n      }\n    }\n\n    return finalState;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,OAA7B;AA2BA,OAAM,SAAUC,YAAV,GAA4D;AAAA,MAArCC,KAAqC,uEAAlB,EAAkB;AAAA,MAAdC,MAAc;;AAChE,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO,CAAC,GAAGF,KAAJ,EAAW,GAAGC,MAAM,CAACE,KAArB,CAAP;AACD,GAFD,MAEO;AACL,QAAIC,UAAU,GAAGJ,KAAjB;;AACA,SAAK,MAAMK,IAAX,IAAmBJ,MAAM,CAACE,KAA1B,EAAiC;AAC/B,YAAMG,KAAK,GAAGF,UAAU,CAACG,SAAX,CAAsBC,CAAD,IAAOV,YAAY,CAACU,CAAC,CAACC,OAAH,EAAYJ,IAAI,CAACI,OAAjB,CAAZ,IAAyCD,CAAC,CAACE,IAAF,KAAWL,IAAI,CAACK,IAArF,CAAd;;AACA,UAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBF,kBAAU,GAAGA,UAAU,CAACO,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKP,KAAlC,CAAb;AACD;AACF;;AACD,WAAOF,UAAP;AACD;AACF","names":["addressEqual","callsReducer","state","action","type","calls","finalState","call","index","findIndex","x","address","data","filter","_","i"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/chainState/callsReducer.ts"],"sourcesContent":["import { addressEqual } from '../..'\n\nexport type Action = AddCall | RemoveCall\n\nexport interface RawCall {\n  address: string\n  data: string\n}\n\n/**\n * @deprecated It's recommended to use RawCall instead\n */\nexport interface ChainCall {\n  address: string\n  data: string\n}\n\ninterface AddCall {\n  type: 'ADD_CALLS'\n  calls: RawCall[]\n}\n\ninterface RemoveCall {\n  type: 'REMOVE_CALLS'\n  calls: RawCall[]\n}\n\nexport function callsReducer(state: RawCall[] = [], action: Action) {\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls]\n  } else {\n    let finalState = state\n    for (const call of action.calls) {\n      const index = finalState.findIndex((x) => addressEqual(x.address, call.address) && x.data === call.data)\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index)\n      }\n    }\n    return finalState\n  }\n}\n"]},"metadata":{},"sourceType":"module"}