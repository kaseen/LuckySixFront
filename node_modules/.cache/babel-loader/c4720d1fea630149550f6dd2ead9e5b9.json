{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nconst ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\nexport async function multicall(provider, address, blockNumber, requests) {\n  var _a;\n\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const contract = new Contract(address, ABI, provider);\n  const [, results] = await contract.aggregate(requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  const state = {};\n\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const result = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,0BAAzB;AAKA,MAAMC,GAAG,GAAG,CACV,0HADU,CAAZ;AAIA,OAAO,eAAeC,SAAf,CACLC,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK,EAIc;;;AAEnB,MAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,EAAP;AACD;;AACD,QAAMC,QAAQ,GAAG,IAAIR,QAAJ,CAAaI,OAAb,EAAsBH,GAAtB,EAA2BE,QAA3B,CAAjB;AACA,QAAM,GAAGM,OAAH,IAAqC,MAAMD,QAAQ,CAACE,SAAT,CAC/CJ,QAAQ,CAACK,GAAT,CAAa;AAAA,QAAC;AAAEP,aAAF;AAAWQ;AAAX,KAAD;AAAA,WAAuB,CAACR,OAAD,EAAUQ,IAAV,CAAvB;AAAA,GAAb,CAD+C,EAE/C;AAAEC,YAAQ,EAAER;AAAZ,GAF+C,CAAjD;AAIA,QAAMS,KAAK,GAAe,EAA1B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,CAACC,MAA7B,EAAqCQ,CAAC,EAAtC,EAA0C;AACxC,UAAM;AAAEX,aAAF;AAAWQ;AAAX,QAAoBN,QAAQ,CAACS,CAAD,CAAlC;AACA,UAAMC,MAAM,GAAGP,OAAO,CAACM,CAAD,CAAtB;AACA,UAAME,eAAe,SAAGH,KAAK,CAACV,OAAD,CAAR,MAAiB,IAAjB,IAAiBc,aAAjB,GAAiBA,EAAjB,GAAqB,EAA1C;AACAD,mBAAe,CAACL,IAAD,CAAf,GAAwB;AAAEO,WAAK,EAAEH,MAAT;AAAiBI,aAAO,EAAE;AAA1B,KAAxB;AACAN,SAAK,CAACV,OAAD,CAAL,GAAiBa,eAAjB;AACD;;AACD,SAAOH,KAAP;AACD","names":["Contract","ABI","multicall","provider","address","blockNumber","requests","length","contract","results","aggregate","map","data","blockTag","state","i","result","stateForAddress","_a","value","success"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/chainState/multicall.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/providers'\nimport { RawCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n]\n\nexport async function multicall(\n  provider: Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const [, results]: [BigNumber, string[]] = await contract.aggregate(\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const result = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = { value: result, success: true }\n    state[address] = stateForAddress\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}