{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\"), new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result) {\n  try {\n    return toUtf8String(_parseBytes(result));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n\n      try {\n        return _parseBytes(yield this.provider.call(tx));\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const transaction = {\n            to: this.address,\n            data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n          };\n          const hexBytes = yield this.provider.call(transaction); // No address\n\n          if (hexBytes === \"0x\" || hexBytes === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(hexBytes);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [];\n\n      try {\n        const avatar = yield this.getText(\"avatar\");\n\n        if (avatar == null) {\n          return null;\n        }\n\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n\n          if (match == null) {\n            continue;\n          }\n\n          switch (match[1]) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: `https:/\\/gateway.ipfs.io/ipfs/${avatar.substring(7)}`\n              };\n\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = match[1] === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: match[1],\n                  content: avatar\n                }); // The owner of this name\n\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n\n                if (comps.length !== 2) {\n                  return null;\n                }\n\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (match[1] === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (match[1] === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n\n                  if (balance.isZero()) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                } // Call the token contract for the metadata URL\n\n\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n\n                let metadataUrl = _parseString(yield this.provider.call(tx));\n\n                if (metadataUrl == null) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (match[1] === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                } // Get the token metadata\n\n\n                const metadata = yield fetchJson(metadataUrl); // Pull the image URL out\n\n                if (!metadata || typeof metadata.image !== \"string\" || !metadata.image.match(/^https:\\/\\//i)) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                });\n                linkage.push({\n                  type: \"url\",\n                  content: metadata.image\n                });\n                return {\n                  linkage,\n                  url: metadata.image\n                };\n              }\n          }\n        }\n      } catch (error) {}\n\n      return null;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(_ref => {\n        let {\n          blockNumber,\n          networkError\n        } = _ref;\n\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              const filter = event.filter;\n              filter.fromBlock = this._lastBlockNumber + 1;\n              filter.toBlock = blockNumber;\n              const runner = this.getLogs(filter).then(logs => {\n                if (logs.length === 0) {\n                  return;\n                }\n\n                logs.forEach(log => {\n                  this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                  this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                  this.emit(filter, log);\n                });\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"call\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const address = yield this._getResolver(name);\n\n        if (address == null) {\n          return null;\n        }\n\n        return new Resolver(this, address, name);\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the resolver from the blockchain\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"ENS\",\n          network: network.name\n        });\n      } // keccak256(\"resolver(bytes32)\")\n\n\n      const transaction = {\n        to: network.ensAddress,\n        data: \"0x0178b8bf\" + namehash(name).substring(2)\n      };\n\n      try {\n        return this.formatter.callAddress(yield this.call(transaction));\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resovler\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddress = yield this._getResolver(reverseName);\n\n      if (!resolverAddress) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      let bytes = arrayify(yield this.call({\n        to: resolverAddress,\n        data: \"0x691f3431\" + namehash(reverseName).substring(2)\n      })); // Strip off the dynamic string pointer (0x20)\n\n      if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n        return null;\n      }\n\n      bytes = bytes.slice(32); // Not a length-prefixed string\n\n      if (bytes.length < 32) {\n        return null;\n      } // Get the length of the string (from the length-prefix)\n\n\n      const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n      bytes = bytes.slice(32); // Length longer than available data\n\n      if (length > bytes.length) {\n        return null;\n      }\n\n      const name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(reverseName);\n\n        if (!resolverAddress) {\n          return null;\n        }\n\n        resolver = new Resolver(this, resolverAddress, \"_\", address);\n      } else {\n        // ENS name; forward lookup\n        resolver = yield this.getResolver(nameOrAddress);\n      }\n\n      const avatar = yield resolver.getAvatar();\n\n      if (avatar == null) {\n        return null;\n      }\n\n      return avatar.url;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","constructor","tag","listener","once","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","encode","matchers","RegExp","_parseString","result","_parseBytes","error","offset","toNumber","Resolver","provider","name","resolvedAddress","formatter","_fetchBytes","selector","parameters","tx","to","call","code","errors","CALL_EXCEPTION","_getAddress","coinType","hexBytes","coinInfo","String","throwError","UNSUPPORTED_OPERATION","operation","bytes","match","parseInt","words","toWords","unshift","getAddress","transaction","substring","callAddress","getAvatar","linkage","avatar","getText","i","push","content","url","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","image","JSON","stringify","getContentHash","ipfs","swarm","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","checkNew","new","target","_events","_emitted","block","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","then","NETWORK_ERROR","undefined","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","Math","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","reason","eq","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","SERVER_ERROR","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","status","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","_getResolver","ensAddress","resolver","lookupAddress","reverseName","resolverAddress","nameOrAddress","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","args","stopped","eventTag","apply","listenerCount","listeners","off","removeAllListeners","found"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@ethersproject/providers/src.ts/base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string): null | string {\n    try {\n        return toUtf8String(_parseBytes(result));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        try {\n            return _parseBytes(await this.provider.call(tx));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = await this.provider.call(transaction);\n\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(hexBytes);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ ];\n        try {\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n\n                if (match == null) { continue; }\n                switch (match[1]) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: `https:/\\/gateway.ipfs.io/ipfs/${ avatar.substring(7) }` }\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (match[1] === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: match[1], content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (match[1] === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (match[1] === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n                        let metadataUrl = _parseString(await this.provider.call(tx))\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (match[1] === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                        }\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n\n                        // Pull the image URL out\n                        if (!metadata || typeof(metadata.image) !== \"string\" || !metadata.image.match(/^https:\\/\\//i)) {\n                            return null;\n                        }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                        linkage.push({ type: \"url\", content: metadata.image });\n\n                        return { linkage, url: metadata.image };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        try {\n            const address = await this._getResolver(name);\n            if (address == null) { return null; }\n            return new Resolver(this, address, name);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        try {\n            return this.formatter.callAddress(await this.call(transaction));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(reverseName);\n            if (!resolverAddress) { return null; }\n\n            resolver = new Resolver(this, resolverAddress, \"_\", address);\n\n        } else {\n            // ENS name; forward lookup\n            resolver = await this.getResolver(nameOrAddress);\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}