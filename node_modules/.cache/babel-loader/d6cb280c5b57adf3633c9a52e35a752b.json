{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  let arrayValues = null;\n\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    let unique = {};\n    arrayValues = coders.map(coder => {\n      const name = coder.localName;\n\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n\n  let staticWriter = new Writer(writer.wordSize);\n  let dynamicWriter = new Writer(writer.wordSize);\n  let updateFuncs = [];\n  coders.forEach((coder, index) => {\n    let value = arrayValues[index];\n\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      let dynamicOffset = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n      let updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(baseOffset => {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  }); // Backfill all the dynamic offsets, now that we know the static length\n\n  updateFuncs.forEach(func => {\n    func(staticWriter.length);\n  });\n  let length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  let values = []; // A reader anchored to this base\n\n  let baseReader = reader.subReader(0);\n  coders.forEach(coder => {\n    let value = null;\n\n    if (coder.dynamic) {\n      let offset = reader.readValue();\n      let offsetReader = baseReader.subReader(offset.toNumber());\n\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n\n    if (value != undefined) {\n      values.push(value);\n    }\n  }); // We only output named properties for uniquely named coders\n\n  const uniqueNames = coders.reduce((accum, coder) => {\n    const name = coder.localName;\n\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n\n      accum[name]++;\n    }\n\n    return accum;\n  }, {}); // Add any named parameters (i.e. tuples)\n\n  coders.forEach((coder, index) => {\n    let name = coder.localName;\n\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n\n    if (values[name] != null) {\n      return;\n    }\n\n    const value = values[index];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        get: () => {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        get: () => {\n          throw value;\n        }\n      });\n    }\n  }\n\n  return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n  constructor(coder, length, localName) {\n    const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    const dynamic = length === -1 || coder.dynamic;\n    super(\"array\", type, localName, dynamic);\n    this.coder = coder;\n    this.length = length;\n  }\n\n  encode(writer, value) {\n    if (!Array.isArray(value)) {\n      this._throwError(\"expected array value\", value);\n    }\n\n    let count = this.length;\n\n    if (count === -1) {\n      count = value.length;\n      writer.writeValue(value.length);\n    }\n\n    logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n    let coders = [];\n\n    for (let i = 0; i < value.length; i++) {\n      coders.push(this.coder);\n    }\n\n    return pack(writer, coders, value);\n  }\n\n  decode(reader) {\n    let count = this.length;\n\n    if (count === -1) {\n      count = reader.readValue().toNumber();\n    }\n\n    let coders = [];\n\n    for (let i = 0; i < count; i++) {\n      coders.push(new AnonymousCoder(this.coder));\n    }\n\n    return reader.coerce(this.name, unpack(reader, coders));\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,SAASE,KAAT,EAAgCC,MAAhC,QAA8C,kBAA9C;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,OAAM,SAAUC,IAAV,CAAeC,MAAf,EAA+BC,MAA/B,EAA6DC,MAA7D,EAA2G;AAC7G,MAAIC,WAAW,GAAe,IAA9B;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACxBC,eAAW,GAAGD,MAAd;AAEF,GAHD,MAGO,IAAIA,MAAM,IAAI,OAAOA,MAAP,KAAmB,QAAjC,EAA2C;AAC9C,QAAII,MAAM,GAAkC,EAA5C;AAEAH,eAAW,GAAGF,MAAM,CAACM,GAAP,CAAYC,KAAD,IAAU;AAC/B,YAAMC,IAAI,GAAGD,KAAK,CAACE,SAAnB;;AACA,UAAI,CAACD,IAAL,EAAW;AACPd,cAAM,CAACgB,UAAP,CAAkB,uDAAlB,EAA2ElB,MAAM,CAACmB,MAAP,CAAcC,gBAAzF,EAA2G;AACvGC,kBAAQ,EAAE,QAD6F;AAEvGN,eAAK,EAAEA,KAFgG;AAGvGO,eAAK,EAAEb;AAHgG,SAA3G;AAKH;;AAED,UAAII,MAAM,CAACG,IAAD,CAAV,EAAkB;AACdd,cAAM,CAACgB,UAAP,CAAkB,yDAAlB,EAA6ElB,MAAM,CAACmB,MAAP,CAAcC,gBAA3F,EAA6G;AACzGC,kBAAQ,EAAE,QAD+F;AAEzGN,eAAK,EAAEA,KAFkG;AAGzGO,eAAK,EAAEb;AAHkG,SAA7G;AAKH;;AAEDI,YAAM,CAACG,IAAD,CAAN,GAAe,IAAf;AAEA,aAAOP,MAAM,CAACO,IAAD,CAAb;AACH,KArBa,CAAd;AAuBH,GA1BM,MA0BA;AACHd,UAAM,CAACqB,kBAAP,CAA0B,qBAA1B,EAAiD,OAAjD,EAA0Dd,MAA1D;AACH;;AAED,MAAID,MAAM,CAACgB,MAAP,KAAkBd,WAAW,CAACc,MAAlC,EAA0C;AACtCtB,UAAM,CAACqB,kBAAP,CAA0B,6BAA1B,EAAyD,OAAzD,EAAkEd,MAAlE;AACH;;AAED,MAAIgB,YAAY,GAAG,IAAIrB,MAAJ,CAAWG,MAAM,CAACmB,QAAlB,CAAnB;AACA,MAAIC,aAAa,GAAG,IAAIvB,MAAJ,CAAWG,MAAM,CAACmB,QAAlB,CAApB;AAEA,MAAIE,WAAW,GAAwC,EAAvD;AACApB,QAAM,CAACqB,OAAP,CAAe,CAACd,KAAD,EAAQe,KAAR,KAAiB;AAC5B,QAAIR,KAAK,GAAGZ,WAAW,CAACoB,KAAD,CAAvB;;AAEA,QAAIf,KAAK,CAACgB,OAAV,EAAmB;AACf;AACA,UAAIC,aAAa,GAAGL,aAAa,CAACH,MAAlC,CAFe,CAIf;;AACAT,WAAK,CAACkB,MAAN,CAAaN,aAAb,EAA4BL,KAA5B,EALe,CAOf;;AACA,UAAIY,UAAU,GAAGT,YAAY,CAACU,mBAAb,EAAjB;AACAP,iBAAW,CAACQ,IAAZ,CAAkBC,UAAD,IAAuB;AACpCH,kBAAU,CAACG,UAAU,GAAGL,aAAd,CAAV;AACH,OAFD;AAIH,KAbD,MAaO;AACHjB,WAAK,CAACkB,MAAN,CAAaR,YAAb,EAA2BH,KAA3B;AACH;AACJ,GAnBD,EA5C6G,CAiE7G;;AACAM,aAAW,CAACC,OAAZ,CAAqBS,IAAD,IAAS;AAAGA,QAAI,CAACb,YAAY,CAACD,MAAd,CAAJ;AAA4B,GAA5D;AAEA,MAAIA,MAAM,GAAGjB,MAAM,CAACgC,YAAP,CAAoBd,YAApB,CAAb;AACAD,QAAM,IAAIjB,MAAM,CAACgC,YAAP,CAAoBZ,aAApB,CAAV;AACA,SAAOH,MAAP;AACH;AAED,OAAM,SAAUgB,MAAV,CAAiBC,MAAjB,EAAiCjC,MAAjC,EAAqD;AACvD,MAAIC,MAAM,GAAQ,EAAlB,CADuD,CAGvD;;AACA,MAAIiC,UAAU,GAAGD,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAjB;AAEAnC,QAAM,CAACqB,OAAP,CAAgBd,KAAD,IAAU;AACrB,QAAIO,KAAK,GAAQ,IAAjB;;AAEA,QAAIP,KAAK,CAACgB,OAAV,EAAmB;AACf,UAAIa,MAAM,GAAGH,MAAM,CAACI,SAAP,EAAb;AACA,UAAIC,YAAY,GAAGJ,UAAU,CAACC,SAAX,CAAqBC,MAAM,CAACG,QAAP,EAArB,CAAnB;;AACA,UAAI;AACAzB,aAAK,GAAGP,KAAK,CAACiC,MAAN,CAAaF,YAAb,CAAR;AACH,OAFD,CAEE,OAAOG,KAAP,EAAc;AACZ;AACA,YAAIA,KAAK,CAACC,IAAN,KAAelD,MAAM,CAACmB,MAAP,CAAcgC,cAAjC,EAAiD;AAAE,gBAAMF,KAAN;AAAc;;AACjE3B,aAAK,GAAG2B,KAAR;AACA3B,aAAK,CAAC8B,QAAN,GAAiBrC,KAAK,CAACC,IAAvB;AACAM,aAAK,CAACN,IAAN,GAAaD,KAAK,CAACE,SAAnB;AACAK,aAAK,CAAC+B,IAAN,GAAatC,KAAK,CAACsC,IAAnB;AACH;AAEJ,KAdD,MAcO;AACH,UAAI;AACA/B,aAAK,GAAGP,KAAK,CAACiC,MAAN,CAAaP,MAAb,CAAR;AACH,OAFD,CAEE,OAAOQ,KAAP,EAAc;AACZ;AACA,YAAIA,KAAK,CAACC,IAAN,KAAelD,MAAM,CAACmB,MAAP,CAAcgC,cAAjC,EAAiD;AAAE,gBAAMF,KAAN;AAAc;;AACjE3B,aAAK,GAAG2B,KAAR;AACA3B,aAAK,CAAC8B,QAAN,GAAiBrC,KAAK,CAACC,IAAvB;AACAM,aAAK,CAACN,IAAN,GAAaD,KAAK,CAACE,SAAnB;AACAK,aAAK,CAAC+B,IAAN,GAAatC,KAAK,CAACsC,IAAnB;AACH;AACJ;;AAED,QAAI/B,KAAK,IAAIgC,SAAb,EAAwB;AACpB7C,YAAM,CAAC2B,IAAP,CAAYd,KAAZ;AACH;AACJ,GAjCD,EANuD,CAyCvD;;AACA,QAAMiC,WAAW,GAAG/C,MAAM,CAACgD,MAAP,CAAc,CAACC,KAAD,EAAQ1C,KAAR,KAAiB;AAC/C,UAAMC,IAAI,GAAGD,KAAK,CAACE,SAAnB;;AACA,QAAID,IAAJ,EAAU;AACN,UAAI,CAACyC,KAAK,CAACzC,IAAD,CAAV,EAAkB;AAAEyC,aAAK,CAACzC,IAAD,CAAL,GAAc,CAAd;AAAkB;;AACtCyC,WAAK,CAACzC,IAAD,CAAL;AACH;;AACD,WAAOyC,KAAP;AACH,GAPmB,EAOa,EAPb,CAApB,CA1CuD,CAmDvD;;AACAjD,QAAM,CAACqB,OAAP,CAAe,CAACd,KAAD,EAAee,KAAf,KAAgC;AAC3C,QAAId,IAAI,GAAGD,KAAK,CAACE,SAAjB;;AACA,QAAI,CAACD,IAAD,IAASuC,WAAW,CAACvC,IAAD,CAAX,KAAsB,CAAnC,EAAsC;AAAE;AAAS;;AAEjD,QAAIA,IAAI,KAAK,QAAb,EAAuB;AAAEA,UAAI,GAAG,SAAP;AAAmB;;AAE5C,QAAIP,MAAM,CAACO,IAAD,CAAN,IAAgB,IAApB,EAA0B;AAAE;AAAS;;AAErC,UAAMM,KAAK,GAAGb,MAAM,CAACqB,KAAD,CAApB;;AAEA,QAAIR,KAAK,YAAYoC,KAArB,EAA4B;AACxBC,YAAM,CAACC,cAAP,CAAsBnD,MAAtB,EAA8BO,IAA9B,EAAoC;AAChC6C,WAAG,EAAE,MAAK;AAAG,gBAAMvC,KAAN;AAAc;AADK,OAApC;AAGH,KAJD,MAIO;AACHb,YAAM,CAACO,IAAD,CAAN,GAAeM,KAAf;AACH;AACJ,GAjBD;;AAmBA,OAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrD,MAAM,CAACe,MAA3B,EAAmCsC,CAAC,EAApC,EAAwC;AACpC,UAAMxC,KAAK,GAAGb,MAAM,CAACqD,CAAD,CAApB;;AACA,QAAIxC,KAAK,YAAYoC,KAArB,EAA4B;AACxBC,YAAM,CAACC,cAAP,CAAsBnD,MAAtB,EAA8BqD,CAA9B,EAAiC;AAC7BD,WAAG,EAAE,MAAK;AAAG,gBAAMvC,KAAN;AAAc;AADE,OAAjC;AAGH;AACJ;;AAED,SAAOqC,MAAM,CAACI,MAAP,CAActD,MAAd,CAAP;AACH;AAGD,OAAM,MAAOuD,UAAP,SAA0B7D,KAA1B,CAA+B;AAIjC8D,cAAYlD,KAAZ,EAA0BS,MAA1B,EAA0CP,SAA1C,EAA2D;AACvD,UAAMoC,IAAI,GAAItC,KAAK,CAACsC,IAAN,GAAa,GAAb,IAAoB7B,MAAM,IAAI,CAAV,GAAcA,MAAd,GAAsB,EAA1C,IAAgD,GAA9D;AACA,UAAMO,OAAO,GAAIP,MAAM,KAAK,CAAC,CAAZ,IAAiBT,KAAK,CAACgB,OAAxC;AACA,UAAM,OAAN,EAAesB,IAAf,EAAqBpC,SAArB,EAAgCc,OAAhC;AAEA,SAAKhB,KAAL,GAAaA,KAAb;AACA,SAAKS,MAAL,GAAcA,MAAd;AACH;;AAEDS,QAAM,CAAC1B,MAAD,EAAiBe,KAAjB,EAAkC;AACpC,QAAI,CAACX,KAAK,CAACC,OAAN,CAAcU,KAAd,CAAL,EAA2B;AACvB,WAAK4C,WAAL,CAAiB,sBAAjB,EAAyC5C,KAAzC;AACH;;AAED,QAAI6C,KAAK,GAAG,KAAK3C,MAAjB;;AAEA,QAAI2C,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdA,WAAK,GAAG7C,KAAK,CAACE,MAAd;AACAjB,YAAM,CAAC6D,UAAP,CAAkB9C,KAAK,CAACE,MAAxB;AACH;;AAEDtB,UAAM,CAACmE,kBAAP,CAA0B/C,KAAK,CAACE,MAAhC,EAAwC2C,KAAxC,EAA+C,iBAAiB,KAAKlD,SAAL,GAAiB,MAAK,KAAKA,SAA3B,GAAuC,EAAxD,CAA/C;AAEA,QAAIT,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIsD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxC,KAAK,CAACE,MAA1B,EAAkCsC,CAAC,EAAnC,EAAuC;AAAEtD,YAAM,CAAC4B,IAAP,CAAY,KAAKrB,KAAjB;AAA0B;;AAEnE,WAAOT,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiBc,KAAjB,CAAX;AACH;;AAED0B,QAAM,CAACP,MAAD,EAAe;AACjB,QAAI0B,KAAK,GAAG,KAAK3C,MAAjB;;AACA,QAAI2C,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdA,WAAK,GAAG1B,MAAM,CAACI,SAAP,GAAmBE,QAAnB,EAAR;AACH;;AAED,QAAIvC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIsD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,KAApB,EAA2BL,CAAC,EAA5B,EAAgC;AAAEtD,YAAM,CAAC4B,IAAP,CAAY,IAAI/B,cAAJ,CAAmB,KAAKU,KAAxB,CAAZ;AAA8C;;AAEhF,WAAO0B,MAAM,CAAC6B,MAAP,CAAc,KAAKtD,IAAnB,EAAyBwB,MAAM,CAACC,MAAD,EAASjC,MAAT,CAA/B,CAAP;AACH;;AA3CgC","names":["Logger","version","logger","Coder","Writer","AnonymousCoder","pack","writer","coders","values","arrayValues","Array","isArray","unique","map","coder","name","localName","throwError","errors","INVALID_ARGUMENT","argument","value","throwArgumentError","length","staticWriter","wordSize","dynamicWriter","updateFuncs","forEach","index","dynamic","dynamicOffset","encode","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","unpack","reader","baseReader","subReader","offset","readValue","offsetReader","toNumber","decode","error","code","BUFFER_OVERRUN","baseType","type","undefined","uniqueNames","reduce","accum","Error","Object","defineProperty","get","i","freeze","ArrayCoder","constructor","_throwError","count","writeValue","checkArgumentCount","coerce"],"sources":["../../src.ts/coders/array.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}