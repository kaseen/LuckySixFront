{"ast":null,"code":"import { utils } from 'ethers';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { shortenString } from './common';\nexport function shortenAddress(address) {\n  try {\n    const formattedAddress = utils.getAddress(address);\n    return shortenString(formattedAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\nexport function shortenIfAddress(address) {\n  if (typeof address === 'string' && address.length > 0) {\n    return shortenAddress(address);\n  }\n\n  return '';\n}\nexport function compareAddress(firstAddress, secondAddress) {\n  try {\n    const parsedFirstAddress = BigNumber.from(firstAddress);\n    const parsedSecondAddress = BigNumber.from(secondAddress);\n\n    if (parsedFirstAddress.gt(parsedSecondAddress)) {\n      return 1;\n    }\n\n    if (parsedFirstAddress.lt(parsedSecondAddress)) {\n      return -1;\n    }\n\n    return 0;\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\nexport function addressEqual(firstAddress, secondAddress) {\n  try {\n    return utils.getAddress(firstAddress) === utils.getAddress(secondAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,SAASC,aAAT,QAA8B,UAA9B;AAEA,OAAM,SAAUC,cAAV,CAAyBC,OAAzB,EAAwC;AAC5C,MAAI;AACF,UAAMC,gBAAgB,GAAGL,KAAK,CAACM,UAAN,CAAiBF,OAAjB,CAAzB;AACA,WAAOF,aAAa,CAACG,gBAAD,CAApB;AACD,GAHD,CAGE,WAAM;AACN,UAAM,IAAIE,SAAJ,CAAc,wCAAd,CAAN;AACD;AACF;AAED,OAAM,SAAUC,gBAAV,CAA2BJ,OAA3B,EAAkD;AACtD,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACK,MAAR,GAAiB,CAApD,EAAuD;AACrD,WAAON,cAAc,CAACC,OAAD,CAArB;AACD;;AACD,SAAO,EAAP;AACD;AAED,OAAM,SAAUM,cAAV,CAAyBC,YAAzB,EAA+CC,aAA/C,EAAoE;AACxE,MAAI;AACF,UAAMC,kBAAkB,GAAGZ,SAAS,CAACa,IAAV,CAAeH,YAAf,CAA3B;AACA,UAAMI,mBAAmB,GAAGd,SAAS,CAACa,IAAV,CAAeF,aAAf,CAA5B;;AAEA,QAAIC,kBAAkB,CAACG,EAAnB,CAAsBD,mBAAtB,CAAJ,EAAgD;AAC9C,aAAO,CAAP;AACD;;AAED,QAAIF,kBAAkB,CAACI,EAAnB,CAAsBF,mBAAtB,CAAJ,EAAgD;AAC9C,aAAO,CAAC,CAAR;AACD;;AAED,WAAO,CAAP;AACD,GAbD,CAaE,WAAM;AACN,UAAM,IAAIR,SAAJ,CAAc,wCAAd,CAAN;AACD;AACF;AAED,OAAM,SAAUW,YAAV,CAAuBP,YAAvB,EAA6CC,aAA7C,EAAkE;AACtE,MAAI;AACF,WAAOZ,KAAK,CAACM,UAAN,CAAiBK,YAAjB,MAAmCX,KAAK,CAACM,UAAN,CAAiBM,aAAjB,CAA1C;AACD,GAFD,CAEE,WAAM;AACN,UAAM,IAAIL,SAAJ,CAAc,wCAAd,CAAN;AACD;AACF","names":["utils","BigNumber","shortenString","shortenAddress","address","formattedAddress","getAddress","TypeError","shortenIfAddress","length","compareAddress","firstAddress","secondAddress","parsedFirstAddress","from","parsedSecondAddress","gt","lt","addressEqual"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/helpers/address.ts"],"sourcesContent":["import { utils } from 'ethers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Falsy } from '../model/types'\nimport { shortenString } from './common'\n\nexport function shortenAddress(address: string): string {\n  try {\n    const formattedAddress = utils.getAddress(address)\n    return shortenString(formattedAddress)\n  } catch {\n    throw new TypeError(\"Invalid input, address can't be parsed\")\n  }\n}\n\nexport function shortenIfAddress(address: string | Falsy): string {\n  if (typeof address === 'string' && address.length > 0) {\n    return shortenAddress(address)\n  }\n  return ''\n}\n\nexport function compareAddress(firstAddress: string, secondAddress: string): number {\n  try {\n    const parsedFirstAddress = BigNumber.from(firstAddress)\n    const parsedSecondAddress = BigNumber.from(secondAddress)\n\n    if (parsedFirstAddress.gt(parsedSecondAddress)) {\n      return 1\n    }\n\n    if (parsedFirstAddress.lt(parsedSecondAddress)) {\n      return -1\n    }\n\n    return 0\n  } catch {\n    throw new TypeError(\"Invalid input, address can't be parsed\")\n  }\n}\n\nexport function addressEqual(firstAddress: string, secondAddress: string): boolean {\n  try {\n    return utils.getAddress(firstAddress) === utils.getAddress(secondAddress)\n  } catch {\n    throw new TypeError(\"Invalid input, address can't be parsed\")\n  }\n}\n"]},"metadata":{},"sourceType":"module"}