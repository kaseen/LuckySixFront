{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers, useLocalStorage } from '../hooks';\nimport { useConfig } from './config';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useInjectedNetwork } from './injectedNetwork';\nexport function NetworkActivator(_ref) {\n  let {\n    providerOverride\n  } = _ref;\n  const {\n    activate,\n    activateBrowserWallet,\n    chainId: connectedChainId\n  } = useEthers();\n  const {\n    readOnlyChainId,\n    readOnlyUrls,\n    autoConnect,\n    pollingInterval\n  } = useConfig();\n  const injectedProvider = useInjectedNetwork();\n  const [shouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const [readonlyConnected, setReadonlyConnected] = useState(false);\n  useEffect(() => {\n    if (providerOverride) {\n      activate(providerOverride);\n    }\n  }, [providerOverride]);\n  useEffect(() => {\n    if (readOnlyChainId && readOnlyUrls && !providerOverride) {\n      if (readOnlyUrls[readOnlyChainId] && connectedChainId !== readOnlyChainId) {\n        const provider = new JsonRpcProvider(readOnlyUrls[readOnlyChainId]);\n        provider.pollingInterval = pollingInterval;\n        activate(provider).then(() => setReadonlyConnected(true));\n      }\n    }\n  }, [readOnlyChainId, readOnlyUrls]);\n  useEffect(() => {\n    shouldConnectMetamask && autoConnect && injectedProvider && !providerOverride && readonlyConnected && activateBrowserWallet();\n  }, [readonlyConnected]);\n  return null;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,UAA3C;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AAMA,OAAM,SAAUC,gBAAV,OAAsE;AAAA,MAA3C;AAAEC;AAAF,GAA2C;AAC1E,QAAM;AAAEC,YAAF;AAAYC,yBAAZ;AAAmCC,WAAO,EAAEC;AAA5C,MAAiEV,SAAS,EAAhF;AACA,QAAM;AAAEW,mBAAF;AAAmBC,gBAAnB;AAAiCC,eAAjC;AAA8CC;AAA9C,MAAkEZ,SAAS,EAAjF;AACA,QAAMa,gBAAgB,GAAGX,kBAAkB,EAA3C;AACA,QAAM,CAACY,qBAAD,IAA0Bf,eAAe,CAAC,uBAAD,CAA/C;AACA,QAAM,CAACgB,iBAAD,EAAoBC,oBAApB,IAA4CnB,QAAQ,CAAC,KAAD,CAA1D;AAEAD,WAAS,CAAC,MAAK;AACb,QAAIQ,gBAAJ,EAAsB;AACpBC,cAAQ,CAACD,gBAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACA,gBAAD,CAJM,CAAT;AAMAR,WAAS,CAAC,MAAK;AACb,QAAIa,eAAe,IAAIC,YAAnB,IAAmC,CAACN,gBAAxC,EAA0D;AACxD,UAAIM,YAAY,CAACD,eAAD,CAAZ,IAAiCD,gBAAgB,KAAKC,eAA1D,EAA2E;AACzE,cAAMQ,QAAQ,GAAG,IAAIhB,eAAJ,CAAoBS,YAAY,CAACD,eAAD,CAAhC,CAAjB;AACAQ,gBAAQ,CAACL,eAAT,GAA2BA,eAA3B;AACAP,gBAAQ,CAACY,QAAD,CAAR,CAAmBC,IAAnB,CAAwB,MAAMF,oBAAoB,CAAC,IAAD,CAAlD;AACD;AACF;AACF,GARQ,EAQN,CAACP,eAAD,EAAkBC,YAAlB,CARM,CAAT;AAUAd,WAAS,CAAC,MAAK;AACbkB,yBAAqB,IACnBH,WADF,IAEEE,gBAFF,IAGE,CAACT,gBAHH,IAIEW,iBAJF,IAKET,qBAAqB,EALvB;AAMD,GAPQ,EAON,CAACS,iBAAD,CAPM,CAAT;AASA,SAAO,IAAP;AACD","names":["useEffect","useState","useEthers","useLocalStorage","useConfig","JsonRpcProvider","useInjectedNetwork","NetworkActivator","providerOverride","activate","activateBrowserWallet","chainId","connectedChainId","readOnlyChainId","readOnlyUrls","autoConnect","pollingInterval","injectedProvider","shouldConnectMetamask","readonlyConnected","setReadonlyConnected","provider","then"],"sources":["/home/vukasin/Desktop/LuckySixFront/node_modules/@usedapp/core/src/providers/NetworkActivator.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useEthers, useLocalStorage } from '../hooks'\nimport { useConfig } from './config'\nimport { JsonRpcProvider } from '@ethersproject/providers'\nimport { useInjectedNetwork } from './injectedNetwork'\n\ninterface NetworkActivatorProps {\n  providerOverride?: JsonRpcProvider\n}\n\nexport function NetworkActivator({ providerOverride }: NetworkActivatorProps) {\n  const { activate, activateBrowserWallet, chainId: connectedChainId } = useEthers()\n  const { readOnlyChainId, readOnlyUrls, autoConnect, pollingInterval } = useConfig()\n  const injectedProvider = useInjectedNetwork()\n  const [shouldConnectMetamask] = useLocalStorage('shouldConnectMetamask')\n  const [readonlyConnected, setReadonlyConnected] = useState(false)\n\n  useEffect(() => {\n    if (providerOverride) {\n      activate(providerOverride)\n    }\n  }, [providerOverride])\n\n  useEffect(() => {\n    if (readOnlyChainId && readOnlyUrls && !providerOverride) {\n      if (readOnlyUrls[readOnlyChainId] && connectedChainId !== readOnlyChainId) {\n        const provider = new JsonRpcProvider(readOnlyUrls[readOnlyChainId])\n        provider.pollingInterval = pollingInterval\n        activate(provider).then(() => setReadonlyConnected(true))\n      }\n    }\n  }, [readOnlyChainId, readOnlyUrls])\n\n  useEffect(() => {\n    shouldConnectMetamask &&\n      autoConnect &&\n      injectedProvider &&\n      !providerOverride &&\n      readonlyConnected &&\n      activateBrowserWallet()\n  }, [readonlyConnected])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}